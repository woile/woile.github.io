<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog</title><link>https://woile.dev/</link><description>Software Engineer, Python dev</description><atom:link href="https://woile.dev/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:santiwilly@gmail.com"&gt;Woile&lt;/a&gt; </copyright><lastBuildDate>Thu, 20 Oct 2022 17:32:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A Rust web app with HTML templates</title><link>https://woile.dev/posts/web-app-with-template-in-rust/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;The other day, I was helping my girlfriend with Go templates in a web server, and the internet is full of tutorials and explanations. And I thought, what about doing the same in Rust? How hard can it be?&lt;/p&gt;
&lt;p&gt;Spoilers: it's easy, but there's not much information around&lt;/p&gt;
&lt;p&gt;Let's change that!&lt;/p&gt;
&lt;h3&gt;The stack&lt;/h3&gt;
&lt;p&gt;If you come from a language with a big standard library like Go, you should know that rust is a bit more lightweight. The language has decided to provide a slim std library with a top of the line package manager and tools. It's up to the community to provide packages like web servers or templating.&lt;/p&gt;
&lt;p&gt;If you come from Python, even though there's a big standard library, when doing web, is not used by developers. Instead, you are probably used to libraries like Django, Jinja2 or Fastapi. If that's the case, you are gonna feel familiar with the following stack.&lt;/p&gt;
&lt;p&gt;This makes me wonder... will Go end up in the same direction as python? Is there something in the standard library that the community doesn't use, and instead, relies on a third party package? Anyways...&lt;/p&gt;
&lt;p&gt;If you come from Javascript, you are probably used to installing many dependencies, so you are already familiar with what's coming next.&lt;/p&gt;
&lt;p&gt;Let's get back to our stack.&lt;/p&gt;
&lt;h4&gt;Axum&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; is one of the favorite web frameworks in the rust landscape. It's not as mature as Actix Web (which continues to rock). But it's getting a lot of traction, because of it's great integration with tokio and its ecosystem. &lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; was created by &lt;a href="https://github.com/davidpdrsn"&gt;David Pedersen&lt;/a&gt; from &lt;a href="https://github.com/EmbarkStudios"&gt;EmbarkStudios&lt;/a&gt;. This company seems to be taking rust to the next level 🙌🏼 🚀.&lt;/p&gt;
&lt;h4&gt;Minijinja&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/mitsuhiko/minijinja/"&gt;Minijinja&lt;/a&gt; is the rust implementation of Python's Jinja2 by the very same awesome author: &lt;a href="https://lucumr.pocoo.org/"&gt;mitsuhiko&lt;/a&gt;. A lot of people are already familiar with it and with good reason, it's easy to use.&lt;/p&gt;
&lt;h4&gt;Tokio&lt;/h4&gt;
&lt;p&gt;The most popular async runtime. It's ideal for writing network applications. Like our web app, built with Axum.
&lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt; has a big ecosystem, from tracing to database drivers.&lt;/p&gt;
&lt;h4&gt;Serde&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt; again, is the most popular way to serialize and deserialize data structures in rust. You serialize or deserialize from one format to another. For example, if you receive a JSON as bytes from an HTTP request, with serde you are going to be able to read the different fields, or load some of that information into a &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt;'s most common way to use is to derive the &lt;code&gt;Serialize&lt;/code&gt; or &lt;code&gt;Deserialize&lt;/code&gt; macros in your &lt;code&gt;struct&lt;/code&gt;. From there,
you can probably read from, or serialize into different formats, many implemented by the community. Some of the list include JSON, TOML, AVRO, and more.&lt;/p&gt;
&lt;p&gt;In our case, minijinja requires the &lt;code&gt;Serialize&lt;/code&gt; macro in our structs to render the templates.&lt;/p&gt;
&lt;h3&gt;Set up&lt;/h3&gt;
&lt;p&gt;You've already &lt;a href="https://www.rust-lang.org/tools/install"&gt;installed rust&lt;/a&gt;, so go to your projects folder
and create a new rust project.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cargo new web-template-rs
&lt;span class="nb"&gt;cd&lt;/span&gt; web-template-rs/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the following dependencies.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cargo add axum &lt;span class="se"&gt;\&lt;/span&gt;
    tokio -F tokio/full &lt;span class="se"&gt;\&lt;/span&gt;
    serde -F serde/derive &lt;span class="se"&gt;\&lt;/span&gt;
    minijinja -F minijinja/builtins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;code&gt;-F&lt;/code&gt; flag to signal which features to include from those crates.&lt;/p&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;p&gt;We are now ready to start. And we won't need anything else.&lt;/p&gt;
&lt;p&gt;A simple webserver retuning HTML without a template looks something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;axum&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;::&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;routing&lt;/span&gt;::&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;'&lt;/span&gt;&lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[tokio::main]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// build our application with a single route&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// run it with hyper on localhost:3000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;axum&lt;/span&gt;::&lt;span class="n"&gt;Server&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:3000"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_make_service&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run our application we run&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cargo run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we haven't configured any logging, you won't see anything in your terminal after running, that's fine.
If you want to learn how to do it, check the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/tracing-aka-logging"&gt;tracing-example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the meanwhile, in your browser go to &lt;code&gt;0.0.0.0:3000&lt;/code&gt; and observe the "hello world" text.&lt;/p&gt;
&lt;h4&gt;What has happened here?&lt;/h4&gt;
&lt;p&gt;When you type a URL or IP in the browser and press &lt;kbd&gt;enter&lt;/kbd&gt;, the browser will "craft"
a GET HTTP request, and send it over a TCP connection to the given IP. If you provide a URL instead (&lt;code&gt;www.example.com&lt;/code&gt;), the browser would have to resolve the IP through DNS. But in our case, we are using directly an IP.&lt;/p&gt;
&lt;p&gt;What are all these acronyms? &lt;a href="https://www.ietf.org/rfc/rfc793.html"&gt;TCP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc791.html"&gt;IP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc2616"&gt;HTTP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc1035.html"&gt;DNS&lt;/a&gt;. They are all Internet Standards. Conventions to guarantee interoperability, they make the internet work. Then is up to people to make actual tools around those protocols. If you want your coffee machine to communicate over the internet, when you start coding its code, you will have to handle all those protocols (or find libraries that already do it for you).&lt;/p&gt;
&lt;p&gt;Remember: &lt;strong&gt;HTTP is plain text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The request your browser will craft, will look something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;localhost:3000&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;*/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it will be sent over the internet inside an HTTP request, which itself will travel inside a TCP packet, which itself travels inside an IP packet. But actually, we are doing this on our local machine, so it won't reach the internet, your computer knows there is someone listening to &lt;code&gt;0.0.0.0&lt;/code&gt; right away.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;   IP
 ┌────────────────────────────────┐
 │          TCP                   │
 │         ┌──────────────────────┤
 │         │           HTTP       │
 │         │          ┌───────────┤
 │         │          │  GET /    │
 └─────────┴──────────┴───────────┘
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The request will be received by our rust web server, and it will attempt to handle the "requested" path (&lt;code&gt;GET /&lt;/code&gt;).
No matter what language you use: rust, python, go, js, etc. requests are all plain text.&lt;/p&gt;
&lt;p&gt;Our rust web server, actually knows how to handle that request, because it includes a &lt;code&gt;route&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; sees the &lt;code&gt;/&lt;/code&gt; and it know it has a function to handle that path. That function actually means something like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return an HTTP response containing HTML with the text "hello world"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And what will axum create? &lt;strong&gt;a plain text HTTP response&lt;/strong&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;content-type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html; charset=utf-8&lt;/span&gt;
&lt;span class="na"&gt;content-length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;11&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mon, 17 Oct 2022 08:03:24 GMT&lt;/span&gt;

hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your browser will receive the response and render a nice white background with the given text.&lt;/p&gt;
&lt;p&gt;Enough with networking lessons woile! I want to know how to use templates.&lt;/p&gt;
&lt;p&gt;True, true... I forgot where were we going with all this... but do we know what templates are?&lt;/p&gt;
&lt;h3&gt;Templates&lt;/h3&gt;
&lt;p&gt;You mix a "custom language", with your target language. This way, you can output the target language from a different one. Let's say we want to create an HTML with a list of users from Rust, Python or Go:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Timmy&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Benji&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Mimi&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happens when we have a new user? We would have to edit it manually, right? Can we make this behave "dynamically" instead?&lt;/p&gt;
&lt;p&gt;Yes, using templates. Minijinja is a rust implementation of the popular python's &lt;code&gt;jinja2&lt;/code&gt;. A popular "template engine" with its own language. There are endless template engines, and they don't share the same syntax. Python django's template engine, go templates, JSX (right?), lodash templates, and more. They end up being similar, they have a way to iterate, show data, or use an if condition.&lt;/p&gt;
&lt;p&gt;Now with a template engine, we can write something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% for user in users %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;user.name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, our fictional user service, can take this template, fetch the users, and passing through the template, render the list of users.&lt;/p&gt;
&lt;p&gt;Templates can be a monstrosity.Because, most of the time, the tooling around them is not good, and you don't get an error until you actually try to render them. If you use Kubernetes, its famous package manager "Helm", uses templates on top of YAML. YAML is already a &lt;a href="https://noyaml.com/"&gt;controversial language&lt;/a&gt;, but add a template layer on top and it can becomes incredibly hard to read and maintain. Spite of this, they are still &lt;strong&gt;convenient&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Axum with templates&lt;/h3&gt;
&lt;p&gt;Back to our web application! This time, we are gonna create 2 fictional &lt;code&gt;structs&lt;/code&gt;, that we'll use as examples.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;serde&lt;/span&gt;::&lt;span class="n"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug, Serialize)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug, Serialize)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see we are using serde's &lt;code&gt;Serialize&lt;/code&gt;, so minijinja can use them. And &lt;code&gt;Profile.items&lt;/code&gt; is a &lt;code&gt;Vec&lt;/code&gt;, this way we can showcase an iteration example in the template.&lt;/p&gt;
&lt;p&gt;As we've seen templates, we are ready to write our jinja2 like template in rust.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROFILE_TEMPLATE&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="nb"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;r#"&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="s"&gt;&amp;lt;html lang="en"&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;  &amp;lt;meta charset="utf-8"&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;&lt;/span&gt;

&lt;span class="s"&gt;  &amp;lt;title&amp;gt;A Basic HTML5 Template&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;  &amp;lt;meta name="description" content="A simple HTML5 Template for new projects."&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;  &amp;lt;meta name="author" content="Woile"&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="s"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;h1&amp;gt;Profile of {{ profile.full_name|title }}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;p&amp;gt;This is a template example to show some functionality&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;h2&amp;gt;Items&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        {% for item in profile.items %}&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;li&amp;gt;{{ item.name }} ({{ item.id }})&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        {% endfor %}&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;"#&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right in the body of the HTML, we show the &lt;code&gt;profile.full_name&lt;/code&gt;, and then we iterate over each item, displaying the &lt;code&gt;name&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And for Axum, we add a new route, that will create some example structs.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;axum&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;::&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;routing&lt;/span&gt;::&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;::&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minijinja&lt;/span&gt;::&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;'&lt;/span&gt;&lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;: &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;: &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="s"&gt;"Article banana"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;: &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="s"&gt;"Article apple"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;: &lt;span class="nc"&gt;profile_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;: &lt;span class="nc"&gt;orders_example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROFILE_TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[tokio::main]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;"/:profile_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_profile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// run it with hyper on localhost:3000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;axum&lt;/span&gt;::&lt;span class="n"&gt;Server&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:3000"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_make_service&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Too complicated?&lt;/p&gt;
&lt;p&gt;Let's take a look at this 2 lines:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="s"&gt;"/:profile_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_profile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line is the &lt;code&gt;path&lt;/code&gt;, which is a the root &lt;code&gt;/&lt;/code&gt; + a variable value &lt;code&gt;:profile_name&lt;/code&gt;.
And right in the next line, we call the &lt;code&gt;get_profile&lt;/code&gt;, which we can see how it uses the &lt;code&gt;profile_name&lt;/code&gt; variable, extracted from the &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, we create the example &lt;code&gt;structs&lt;/code&gt;. In a real example, that information would probably come from a database.&lt;/p&gt;
&lt;p&gt;And then, inside the &lt;code&gt;get_profile&lt;/code&gt; we have:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROFILE_TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;render!&lt;/code&gt; is minijinja's macro, that receives the template we previous declared, and then we provide some kind of "map" between the variables used in the template first, and then the rust variable.&lt;/p&gt;
&lt;p&gt;A downside here is, that if we have an error in our template, we are only going to see it during runtime.
But on the bright side, this introduction was a quick way to get started with templates and axum in Rust.&lt;/p&gt;
&lt;p&gt;The code is available on &lt;a href="https://github.com/woile/web-template-rs-example"&gt;github.com/woile/web-template-rs-example&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;Interested in what I write? follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>jinja</category><category>networking</category><category>rust</category><category>templates</category><guid>https://woile.dev/posts/web-app-with-template-in-rust/</guid><pubDate>Sun, 16 Oct 2022 15:27:25 GMT</pubDate></item><item><title>Logging in python</title><link>https://woile.dev/posts/logging-in-python/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For future reference, this is my logging configuration for a new project.&lt;/p&gt;
&lt;p&gt;It is not intended for libraries which already have some kind of set up in place, like django.&lt;/p&gt;
&lt;h3&gt;Simple logging configuration&lt;/h3&gt;
&lt;p&gt;This is a good configuration to start logging right away.
You can use it when you have a single file, or you can share the &lt;code&gt;logger&lt;/code&gt; if stored in a separated file,
which is not recommended when you start growing.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LOGLEVEL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'INFO'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my_app"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt;] &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(lineno)d&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; :: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Send messages&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Set LOGLEVEL=DEBUG to see this"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An info log"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also replace &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;pathname&lt;/code&gt; to get the full path.&lt;/p&gt;
&lt;h3&gt;Project-wide logging configuration&lt;/h3&gt;
&lt;p&gt;In this case we want to configure the logs once, by using the popular dict logging conf:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# ./my_app/logs.py&lt;/span&gt;
&lt;span class="n"&gt;LOGGING_CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"disable_existing_loggers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"formatters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"standard"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt;] &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(lineno)d&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; :: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"INFO"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"formatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"standard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"logging.StreamHandler"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"stream"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ext://sys.stdout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Default is stderr&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"loggers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;# root logger&lt;/span&gt;
            &lt;span class="s2"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;# if __name__ == '__main__'&lt;/span&gt;
            &lt;span class="s2"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;"my_app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;# folder&lt;/span&gt;
            &lt;span class="s2"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s2"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"INFO"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging.config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Run once at startup:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGGING_CONFIG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# ./my_app/foo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logs&lt;/span&gt;

&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Send messages&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Set LOGLEVEL=DEBUG to see this"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And your folder structure should look something like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;my-app/
└── my_app/
    ├── foo.py
    └── logs.py
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Structured logging&lt;/h3&gt;
&lt;p&gt;Structured logs are usually in JSON format, making it easy for machines to parse and index them. See for example &lt;a href="https://www.elastic.co/blog/structured-logging-filebeat"&gt;structured logging with filebeat&lt;/a&gt;.
A common format is bunyan, based on &lt;a href="https://github.com/trentm/node-bunyan"&gt;bunyan-node&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;pip install bunyan
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bunyan&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my_app"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bunyan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BunyanFormatter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;console_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Send messages&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Set LOGLEVEL=DEBUG to see this"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of this script would only show the &lt;code&gt;info&lt;/code&gt; logger, and it would look like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my_app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-06-21T07:41:06Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"hostname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;REDACTED&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"pid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"v"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For local development, pipe the logs to the buyan cli, so they become friendly for developers.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;wget -c https://github.com/LukeMathWalker/bunyan/releases/download/v0.1.7/bunyan-v0.1.7-x86_64-unknown-linux-gnu.tar.gz -O - &lt;span class="p"&gt;|&lt;/span&gt; tar -xz

python my_app.py &lt;span class="p"&gt;|&lt;/span&gt; ./bunyan
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Docker issues&lt;/h3&gt;
&lt;p&gt;Sometimes the logs are not sent to the terminal right away, specially if something is blocking. To prevent this, send right away the output to the terminal by setting the env &lt;code&gt;PYTHONUNBUFFERED=1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Dockerfile&lt;/h4&gt;
&lt;p&gt;Include this line&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PYTHONUNBUFFERED &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Running docker&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;docker run --env &lt;span class="s2"&gt;"PYTHONUNBUFFERED=1"&lt;/span&gt; python:slim bash
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Docker-compose&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;my_app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PYTHONUNBUFFERED=1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>logging</category><category>python</category><guid>https://woile.dev/posts/logging-in-python/</guid><pubDate>Wed, 11 May 2022 13:21:55 GMT</pubDate></item><item><title>Digesting Make and Makefiles</title><link>https://woile.dev/posts/digesting-make-makefile/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Make and its makefiles, are a fantastic tool to keep track of the commands needed to build or run an application.
I have recently done a big refactor for a project, where we make heavy use of Make, and decided to write this small piece about Make.&lt;/p&gt;
&lt;p&gt;Just create a &lt;code&gt;Makefile&lt;/code&gt; at the root of your project, start adding commands, and done... right? Not really.&lt;/p&gt;
&lt;p&gt;Let's explore a bit more what I mean, and then try to build a mental model that matches reality a bit better,
closing with some magic you can do with Makefiles.&lt;/p&gt;
&lt;p&gt;Set up a practice field by running in the terminal:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;mkdir /tmp/practice
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/practice
touch index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And write a minimal &lt;code&gt;Makefile&lt;/code&gt; with your favourite editor (E.g: &lt;code&gt;vim Makefile&lt;/code&gt;)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist
    cp index.html dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then execute in your terminal:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a folder &lt;code&gt;dist&lt;/code&gt;, and copy &lt;code&gt;index.html&lt;/code&gt; into the folder &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is good. Particularly for me, it documents the commands used by the project, and helps future me.&lt;/p&gt;
&lt;p&gt;Let's refactor a bit, to show some extra functionality:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    cp index.html dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code&gt;build: dist&lt;/code&gt;, it means: call &lt;code&gt;dist&lt;/code&gt; command &lt;em&gt;before&lt;/em&gt; running &lt;code&gt;build&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The functionality remains the same.&lt;/p&gt;
&lt;h4&gt;Recap&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;We created two commands: &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;dist&lt;/code&gt; is executed by the &lt;code&gt;build&lt;/code&gt; before running itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is ok, but it's not necessary a correct mental model.
In the Makefile world, commands are not commands... but files.&lt;/p&gt;
&lt;h3&gt;New mental model&lt;/h3&gt;
&lt;p&gt;In a nutshell, make builds a &lt;a href="https://en.wikipedia.org/wiki/Dependency_graph"&gt;dependency graph&lt;/a&gt; of files and folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; are actually &lt;strong&gt;target files&lt;/strong&gt; (or folders).&lt;/li&gt;
&lt;li&gt;doing &lt;code&gt;build: dist&lt;/code&gt; means that &lt;code&gt;build&lt;/code&gt; depends on &lt;code&gt;dist&lt;/code&gt; existing first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we had a file called &lt;code&gt;build&lt;/code&gt; , doing &lt;code&gt;make build&lt;/code&gt;, wouldn't execute anything.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;touch build
make build
$ make: `build' is up to date.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to actually treat &lt;code&gt;build&lt;/code&gt; as a command, we have to add &lt;code&gt;.PHONY&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    cp index.html dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way Make no longer sees &lt;code&gt;build&lt;/code&gt; as a file, but instead as a recipe, and it will be
executed everytime.&lt;/p&gt;
&lt;h3&gt;Back to targets&lt;/h3&gt;
&lt;p&gt;Remember what we said about targets and dependency graph? No? Me neither.
Don't worry, I actually didn't say anything.&lt;/p&gt;
&lt;p&gt;If you treat your targets as &lt;strong&gt;files&lt;/strong&gt;, Make can keep track of the files that have
changed, and update only those.&lt;/p&gt;
&lt;p&gt;By knowing this our previous example could be refactored into:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;dist/index.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    cp index.html dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we tell Make to create our target file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run multiple times, we get:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make: `dist/index.html' is up to date.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We would expect that by modifying &lt;code&gt;index.html&lt;/code&gt;, and running &lt;code&gt;make dist/index.html&lt;/code&gt;, it would be rebuilt,
but we are getting the same message.&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;We need to tell Make that it depends on another file: &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;dist/index.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt;
    cp index.html dist/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, if &lt;code&gt;index.html&lt;/code&gt; is modified, &lt;code&gt;make dist/index.html&lt;/code&gt; will run again.
Thus, when dependecies are updated, &lt;strong&gt;target files&lt;/strong&gt; are recreated.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Makefile targets and dependencies" src="https://woile.dev/images/makefile/make-targets-deps.png"&gt;&lt;/p&gt;
&lt;h3&gt;Patterns&lt;/h3&gt;
&lt;p&gt;Now let's say we have many html files&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;touch about.html privacy.html docs.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we want to do the same for all the files, without creating many commands in Make.
For this case we use a pattern (&lt;code&gt;%&lt;/code&gt;), and some Make variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt;: the target file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt;: the input file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;dist/%.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    cp $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make dist/about.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we would be explicitly telling Make which file to create.&lt;/p&gt;
&lt;p&gt;But what if we want to copy all the files at the same time?&lt;/p&gt;
&lt;p&gt;Our current implementation, doesn't know about the available files.
And we are providing the &lt;code&gt;about&lt;/code&gt; to the &lt;code&gt;make dist/about.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have to find a way to "know" all the possible targets.&lt;/p&gt;
&lt;h3&gt;Variables&lt;/h3&gt;
&lt;p&gt;We are gonna find the source files (&lt;code&gt;*.html&lt;/code&gt; files which are not in the &lt;code&gt;dist&lt;/code&gt; folder), store in a variable,
and then use that information to create the target html files.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;SRC_HTMLS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell find . -name &lt;span class="s1"&gt;'*.html'&lt;/span&gt; -depth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;TARGET_HTMLS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;SRC_HTMLS:./%.html&lt;span class="o"&gt;=&lt;/span&gt;dist/%.html&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TARGET_HTMLS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;info Done&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkdir dist

&lt;span class="nf"&gt;dist/%.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    cp $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;make build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happens is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; has all the &lt;code&gt;TARGET_HTMLS&lt;/code&gt; files as dependency&lt;/li&gt;
&lt;li&gt;Make also sees &lt;code&gt;dist/%.html&lt;/code&gt; and the pattern will fit the criteria for each &lt;code&gt;TARGET_HTMLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;dist/%.html&lt;/code&gt; we have as dependency  the &lt;code&gt;%.html&lt;/code&gt;, so Make takes the pattern and checks if a &lt;code&gt;%.html&lt;/code&gt; file exist&lt;/li&gt;
&lt;li&gt;If the conditions are met, it runs the &lt;code&gt;cp&lt;/code&gt; command for each file, unless they are already present and not updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can think of&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TARGET_HTMLS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;/&lt;span class="n"&gt;index&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;/&lt;span class="n"&gt;about&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;/&lt;span class="n"&gt;docs&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;/&lt;span class="n"&gt;privacy&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Variables can be reference using &lt;code&gt;$()&lt;/code&gt; or &lt;code&gt;${}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also use &lt;code&gt;$(info Done)&lt;/code&gt; to send information messages to the user.
Make also provides &lt;code&gt;$(warning text…)&lt;/code&gt; for warnings, and
&lt;code&gt;$(error text...)&lt;/code&gt; to exit earlier with an error code different than 0.
See &lt;a href="https://www.gnu.org/software/make/manual/html_node/Make-Control-Functions.html"&gt;Make-Control-Functions&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;One more time&lt;/h3&gt;
&lt;p&gt;Let's start over by removing the &lt;code&gt;dist&lt;/code&gt; folder, and see what happens&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;rm -rf dist
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;❯ make build
mkdir dist
cp index.html dist/index.html
cp about.html dist/about.html
cp docs.html dist/docs.html
cp privacy.html dist/privacy.html
Done

❯ make build
Done
make: Nothing to be done for `build'.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, files that have not changed, won't be rebuilt by Make.&lt;/p&gt;
&lt;p&gt;Now, try using &lt;code&gt;touch&lt;/code&gt; on the different &lt;code&gt;html&lt;/code&gt; files and running &lt;code&gt;make build&lt;/code&gt; to see what happens.&lt;/p&gt;
&lt;h3&gt;More functionality&lt;/h3&gt;
&lt;p&gt;Make is a powerful tool, and provides much more functionality, so far with the web stack
I haven't had the need for more complexity.&lt;/p&gt;
&lt;p&gt;I usually wrap docker commands, and make use of different variables, but if the need arises,
make has extra functionality, life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;li&gt;if/conditions&lt;/li&gt;
&lt;li&gt;change the shell in which the commands are executed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.delete_on_error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Make is usually a good way to keep track of a project's commands, as it's available in Unix systems,
and you can be up and running fast.
But by no means is perfect, it can sometimes be hard to read, or use.
It's not available on Windows. And because it was designed for the C,C++ era, it plays well with files,
but it doesn't mean it fits perfectly the web development paradigm, where you don't "transform" files much
and where &lt;code&gt;docker&lt;/code&gt; is used a lot.&lt;/p&gt;
&lt;p&gt;So depending on your situation, there are some popular alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/casey/just"&gt;just&lt;/a&gt;: modern approach to make written in rust&lt;/li&gt;
&lt;li&gt;&lt;a href="https://earthly.dev/"&gt;earthly.dev&lt;/a&gt;: repeatable builds based on docker&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bazel.build/"&gt;bazel&lt;/a&gt;: build tool from Google&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/github/scripts-to-rule-them-all"&gt;scripts-to-rule-them-all&lt;/a&gt;: just use scripts, like &lt;a href="https://github.com/encode/starlette/tree/master/scripts"&gt;starlette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/make/manual/html_node/"&gt;GNU Make Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makefiletutorial.com/"&gt;Makefiletutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>documentation</category><category>gnu</category><category>linux</category><category>make</category><category>tutorial</category><category>unix</category><guid>https://woile.dev/posts/digesting-make-makefile/</guid><pubDate>Thu, 17 Feb 2022 12:21:47 GMT</pubDate></item><item><title>The Layout Team</title><link>https://woile.dev/posts/the-layout-team/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For the last couple of months I've had this idea spinning in my head, which I'm
calling:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Layout Team&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is a work in progress and I'll try to update it when new things come to my mind.
The topic can be discussed forever, I will try to formalize the idea while keeping
it short.&lt;/p&gt;
&lt;p&gt;I see how the frontend industry is led mostly by hype, and this time I'm not fond of the
direction we are going, specifically with micro-frontends. This pattern,
spite of its benefits, I don't think it can be
implemented properly by most teams, and it's not an idea we should keep suggesting.&lt;/p&gt;
&lt;p&gt;Instead, I'm going to propose an alternative, mostly in the middle.
And as you probably guessed... it's "The Layout Team".&lt;/p&gt;
&lt;p&gt;As far as I'm concerned, the ultimate goal of a frontend is to deliver a good
user experience, and this includes being fast.&lt;/p&gt;
&lt;p&gt;Micro-frontends, make this target hard to achieve.
If you pull parts from all around it will take longer than pulling from a single
place. Of course some teams can accomplish this (out of the question), and they may need it,
but most of the time, is not required, but... what do we do then?&lt;/p&gt;
&lt;p&gt;The main issue to me, is that a frontend application has to be &lt;strong&gt;glued together&lt;/strong&gt; at
some point, or somewhere. Whether you use a micro-frontend architecture or a monorepo, the final
user has to experience one cohesive app, this is &lt;strong&gt;different&lt;/strong&gt; to backends, there's no UI there,
mostly machines talk with APIs. Your frontend talks with the API, but the human interacts with
the frontend.&lt;/p&gt;
&lt;p&gt;Hence the introduction of &lt;strong&gt;"The Layout Team"&lt;/strong&gt; (I'm giving it a formal name)&lt;/p&gt;
&lt;p&gt;This team could have many different flavours.
But ideally, it should be an independent team, holding ownership of the layout of the app.&lt;/p&gt;
&lt;p&gt;Yes, there's nothing fancy here, and the title is self-explanatory.&lt;/p&gt;
&lt;p&gt;The Layout Team maintains the layout, and checks that everyone operates inside the
boundaries created by this team.&lt;/p&gt;
&lt;p&gt;Its responsibilities include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor styles to prevent overlapping components or breaking issues&lt;/li&gt;
&lt;li&gt;Review Pull Requests&lt;/li&gt;
&lt;li&gt;Train other developers, whether through quarterly presentations or one-to-one coaching, but
do it consistently over time. Not fire and forget.&lt;/li&gt;
&lt;li&gt;Maintain &lt;em&gt;some&lt;/em&gt; shared state (logged user or is_authenticated or any other herbs).
But most of the times teams should be able to add and manage their own global state&lt;/li&gt;
&lt;li&gt;Write tools to assist other teams, like linters to prevent CSS or JS, where&lt;/li&gt;
&lt;li&gt;Identify CSS or JS code that may affect the whole app, and potentially code them
into the linters. Example:&lt;ul&gt;
&lt;li&gt;Do not use fixed/absolute because... (unless approved to do so)&lt;/li&gt;
&lt;li&gt;Do not use negative margins because we found that no one knows who to...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write tests for the layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One easy way to do this, is by having a monorepo (recommended). The layout for the different pages
is defined by "The Layout Team", and the rest of the teams write components,
which can be later placed in the places designated by the layout team.&lt;/p&gt;
&lt;p&gt;By doing this, it becomes very easy to produce a small bundle. Because the dependencies
are shared. It's then potentially easier, to identify shared code and cache it in a
separate bundle across the application.&lt;/p&gt;
&lt;p&gt;One of the "benefits" of micro-frontend is supposed to be the freedom for teams to
choose what framework to use, but you end up sending bigger assets to the end user.
This goes against optimizing for the best user experience. So ideally, stick
to a single framework, and deliver it once.&lt;/p&gt;
&lt;p&gt;If you are using React in your monorepo, it means everyone will stick to that
version. If you have multiple repos, even if everyone uses the same framework,
you may end up with different versions, or even the same and still delivering them
as part of each apps bundle!&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;The Layout Team&lt;/strong&gt; leverages the use of &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; heavily.
They shape the app over time. And create &lt;em&gt;slots&lt;/em&gt; for each team.&lt;/p&gt;
&lt;p&gt;Let's see an example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"box grid grid-cols-2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamA"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamA&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamB"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamB&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamC"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamC&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;style&gt;
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid {
    display: grid;
  }
  .box {
    margin: 0.75rem;
    width: 90%;
    border-width: 4px;
    border-style: solid;
    --tw-border-opacity: 1;
    border-color: rgba(107, 114, 128, var(--tw-border-opacity));
    padding: 0.75rem;
  }
  .teamBox {
    margin: 0.25rem;
    border-width: 4px;
    border-style: dashed;
    padding: 0.5rem;
  }
  .border-indigo-500 {
    --tw-border-opacity: 1;
    border-color: rgba(99, 102, 241, var(--tw-border-opacity));
  }
  .border-red-500 {
    --tw-border-opacity: 1;
    border-color: rgba(239, 68, 68, var(--tw-border-opacity));
  }
  .border-green-500 {
    --tw-border-opacity: 1;
    border-color: rgba(16, 185, 129, var(--tw-border-opacity));
  }
&lt;/style&gt;

&lt;div class="box grid grid-cols-2"&gt;
  &lt;div class="teamBox border-indigo-500" maintainer="teamA"&gt;TEAM A&lt;/div&gt;
  &lt;div&gt;
    &lt;div class="teamBox border-red-500" maintainer="teamB"&gt;TEAM B&lt;/div&gt;
    &lt;div class="teamBox border-green-500" maintainer="teamC"&gt;TEAM C&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;- Hey! It's almost the same example as a micro-frontend!&lt;/p&gt;
&lt;p&gt;- Well... yes, what did you expect?&lt;/p&gt;
&lt;p&gt;Each team now has a space to place their components, and there's full visibility
over who maintains what.&lt;/p&gt;
&lt;p&gt;It is very important, that the people, that are part of this team,
understand &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; very well.&lt;/p&gt;
&lt;p&gt;Useful layout resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;guide to flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://1linelayouts.glitch.me/"&gt;1linelayouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://csslayout.io/"&gt;csslayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would very much like your feedback.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What has been your experience with micro-frontends?&lt;/li&gt;
&lt;li&gt;Do you think "the layout team" would work?&lt;/li&gt;
&lt;li&gt;What do you think of this proposal?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading&lt;/p&gt;
&lt;h3&gt;Update 2022&lt;/h3&gt;
&lt;p&gt;Seems like there are already some good tools designed for monorepos architecture,
where you can use micro-frontends safely.&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://turborepo.org/"&gt;turborepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nx.dev/"&gt;nx.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>architecture</category><category>html</category><category>javascript</category><guid>https://woile.dev/posts/the-layout-team/</guid><pubDate>Mon, 08 Nov 2021 07:05:42 GMT</pubDate></item><item><title>Domain driven design at Europython 2021</title><link>https://woile.dev/posts/domain-driven-design-at-europython-2021/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Today I participated of the training &lt;a href="https://ep2021.europython.eu/talks/Bvzn5TH-transcend-the-realms-of-development-a-day-in-life-of-a-software-architect/"&gt;transcend the realms of development&lt;/a&gt;
at europython 2021, and I'm quite happy with the result.
Sometimes I'm hesitant of workshops because I don't
manage to extract value, but I really did from this one, and the hosts were great.
I've been questioning myself on how to make better representations of software,
specially among multiple developers and stakeholders, how to share a common language?&lt;/p&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Let's start by my final conclusions:&lt;/p&gt;
&lt;p&gt;My models on how to design software collaboratively are outdated; mostly UML and random diagrams, no clear design process.
There are new techniques used nowadays, so I will asses them and try to integrate
into my tool-belt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Asses &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;. I would like to be trained into this technique.&lt;/li&gt;
&lt;li&gt;Asses &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt; and &lt;a href="https://github.com/plantuml-stdlib/C4-PlantUML"&gt;diagrams as code&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;For KPN, I already added diagrams as code and C4 support in &lt;a href="https://kpn.github.io/mkdocs-kpn-theme/md-extensions/#plantuml-diagrams"&gt;mkdocs-kpn-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Next, you can find my notes, they may not be complete, I tried adding
some images to make them more understandable.&lt;/p&gt;
&lt;h3&gt;Domain driven design&lt;/h3&gt;
&lt;p&gt;Normally architecture grows organically, but it can have unexpected consequences.&lt;/p&gt;
&lt;p&gt;Domain driven design helps with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify domains -&amp;gt; core domains and secondary domains&lt;/li&gt;
&lt;li&gt;Quick feedback -&amp;gt; same language between stakeholders and developers&lt;/li&gt;
&lt;li&gt;Loosely coupled domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Phases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ritual dissent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eventstorming.com/"&gt;Event storming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defining domains&lt;/li&gt;
&lt;li&gt;Building future of our project using &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ritual dissent&lt;/h3&gt;
&lt;p&gt;Small groups iterating over features, then one person from each group
makes a pitch of 1 min to one of the other groups and gathers feedback.&lt;/p&gt;
&lt;p&gt;It goes like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teammate goes to other group and pitches&lt;/li&gt;
&lt;li&gt;Once done, the pitcher just listens to the feedback and takes notes, doesn't need
  to answer anything&lt;/li&gt;
&lt;li&gt;Goes back to the team and keeps refining&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The owner of a problem often has fixed ideas about both the problem and possible solutions. Ritual dissent, developed by Dave Snowden of Cognitive Edge, allows a group of people to discuss a problem whilst its ‘owner’ turns around and listens to the discussion without intervening.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Event storming&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;EventStorming is a flexible workshop format for collaborative exploration of complex business domains.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was quite pleased of the way it went with &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;,
because it's simple, easy to pick up technique, while being quite expressive.&lt;/p&gt;
&lt;p&gt;At the end of the day, event storming should help find bounded contexts.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://github.com/ddd-crew/eventstorming-glossary-cheat-sheet"&gt;event storming glossary cheat sheet&lt;/a&gt; for more documentation.&lt;/p&gt;
&lt;h3&gt;Defining domains&lt;/h3&gt;
&lt;p&gt;Once you are done with the event storm, you can start identifying your domains, take a look
at the next digram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="event storming context" src="https://woile.dev/images/domain-driven-design-at-europython-2021/event-storming-context.png"&gt;&lt;/p&gt;
&lt;p&gt;Taken from a &lt;a href="https://miro.com/miroverse/event-storming/"&gt;miro board over event storming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are the usual steps to finding the domains:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collect Domain Events - discover them&lt;/li&gt;
&lt;li&gt;Refine Domain Events - placing them in sequence&lt;/li&gt;
&lt;li&gt;Track causes - modelling out the broader ecosystem&lt;/li&gt;
&lt;li&gt;Re-sorting &amp;amp; result - categorize the events and build Bounded Contexts&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Messages between systems&lt;/h3&gt;
&lt;p&gt;We didn't get to this step.&lt;/p&gt;
&lt;h3&gt;Building the future of a project&lt;/h3&gt;
&lt;p&gt;We didn't get to this step, either, but it's about using C4 diagrams.
There was also a recommendation to use diagrams as a code, like plantUML, which
has support for C4 diagrams.&lt;/p&gt;
&lt;p&gt;In theory, C4 are zoom-in diagrams, with a very small surface of components to be learnt, different
to other approaches like UML, which have a massive scope.&lt;/p&gt;
&lt;p&gt;C4 has 4 levels of abstraction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;System Context diagram&lt;/strong&gt;: allows you to step back and see the big picture
   &lt;img src="https://c4model.com/img/bigbankplc-SystemContext.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container diagram&lt;/strong&gt;: shows the high-level shape of the software architecture and how responsibilities are distributed across it. It also shows the major technology choices and how the containers communicate with one another.
   &lt;img src="https://c4model.com/img/bigbankplc-Containers.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component diagram&lt;/strong&gt;: decomposes each container further to identify the major structural building blocks and their interactions.
   shows how a container is made up of a number of "components", what each of those components are, their responsibilities and the technology/implementation details.
   &lt;img src="https://c4model.com/img/bigbankplc-Components.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;Code: it is usually recommended to generate this automatically from the code, or do
   it only when really necessary.&lt;/li&gt;
&lt;/ol&gt;</description><guid>https://woile.dev/posts/domain-driven-design-at-europython-2021/</guid><pubDate>Mon, 26 Jul 2021 17:44:24 GMT</pubDate></item><item><title>Intro to FIRE in the Netherlands</title><link>https://woile.dev/posts/into-to-fire-in-the-netherlands/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;My idea with this post is to share a bit of the information I have collected and throw
at you the information you need to get started without having to think too much.&lt;/p&gt;
&lt;p&gt;Investment is something that &lt;strong&gt;doesn't appeal to me&lt;/strong&gt;, so I'm trying to figure it out
effectively, so I don't have to think about it in the future.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ATTENTION&lt;/p&gt;
&lt;p&gt;I'm not a professional at this, and I don't like it either, so I can't give you
any guarantees of anything. Take it as an introduction to the topic. And explore further yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any questions, contributions or corrections are welcome, there is a comments section at
end or you can find me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;"Financial Independence, Retire Early" is a movement whose objective says: accumulate
assets, until you can live on the passive income they generate or sell them slowly.
The idea is to maximize savings, reduce expenses and find different ways to
increase revenue.&lt;/p&gt;
&lt;p&gt;It is theorized that the higher the percentage you save of your salary, the faster you will be able to retire.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not about getting rich instantly&lt;/strong&gt;, this is about retiring early, i.e.
in less time than it takes to reach a pension.&lt;/p&gt;
&lt;p&gt;It is not about having a ton of money either, but that your assets produce more or less
cover the expenses you now have.&lt;/p&gt;
&lt;p&gt;To throw a number, I would say that it takes an average of 20 years; this is much less than
a pension. But this varies depending on your situation.&lt;/p&gt;
&lt;p&gt;Beyond that, it is a great complement to what your pension will be and is
&lt;strong&gt;better than having your money standing still&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can read more in the subreddit &lt;a href="https://www.reddit.com/r/financialindependence/wiki/faq"&gt;/r/financialindependance faq&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you have &lt;strong&gt;no debt&lt;/strong&gt; and have a cushion of money, at least
to &lt;strong&gt;be able to live for 6 months&lt;/strong&gt;, before starting.&lt;/p&gt;
&lt;h3&gt;Investments&lt;/h3&gt;
&lt;p&gt;I am going to focus on &lt;strong&gt;where to invest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In general, people do not know what can be done with the savings, in addition to having them in the bank account.&lt;/p&gt;
&lt;p&gt;So... where to invest? The answer is simple:&lt;/p&gt;
&lt;p&gt;In the stock market. Yes, &lt;strong&gt;shares&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The stock market has the highest return margin (~7.5% legend has it),
better than real estate, and others &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;[0]&lt;/a&gt;.
We control the risk investing in a controlled way, and aiming long term which is what is explained in this post.
Canadian Ben Felix explains, for example, the cost associated with buying a home in &lt;a href="https://youtu.be/Uwl3-jBNEd4"&gt;this video&lt;/a&gt;. And in the book &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to wealth&lt;/a&gt; expands a lot on the subject of index funds, highly &lt;strong&gt;recommended&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stock market" src="https://woile.dev/images/fire-para-argentinos-en-los-paises-bajos/stock.jpg"&gt;&lt;/p&gt;
&lt;p&gt;But we are not going to invest in the way that one thinks of stocks, having to look at the cell phone screen every day, &lt;strong&gt;not that please!&lt;/strong&gt; We'll see later.&lt;/p&gt;
&lt;h4&gt;How much do I need to retire&lt;/h4&gt;
&lt;p&gt;The calculation is &lt;strong&gt;25 times your annual expenses&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Trinity_study"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I use €40k per year to live. So €40k * 25 = €1M&lt;/li&gt;
&lt;li&gt;I have €1M in savings. So I can spend €40k per year (4%).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That &lt;strong&gt;4%&lt;/strong&gt; appears in many places mentioned.&lt;/p&gt;
&lt;p&gt;You can read "&lt;a href="https://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;The Shockingly Simple Math Behind Early Retirement&lt;/a&gt;" for more info.&lt;/p&gt;
&lt;h4&gt;Where do I invest?&lt;/h4&gt;
&lt;p&gt;Basically we will invest in ETFs or &lt;em&gt;index funds&lt;/em&gt;, which are more or less the same, long
term does not matter much the difference.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;index funds&lt;/em&gt; are a set of shares of multiple companies.&lt;/p&gt;
&lt;p&gt;Back in the '70s, a certain &lt;a href="https://en.wikipedia.org/wiki/John_C._Bogle"&gt;John C. Bogle&lt;/a&gt; said that you had to build an index that
mimics the performance of the market in general in the long term.
If the market in a long period of time generates 10% interest, that is what we will aim for.
He said that the &lt;strong&gt;market is always growing&lt;/strong&gt;.
He then founded &lt;a href="https://investor.vanguard.com/corporate-portal/"&gt;The Vanguard Group&lt;/a&gt;, in which
the owners are the clients themselves, that is, if you have shares of the index you are partly the owner.&lt;/p&gt;
&lt;p&gt;Bogle was against speculation, which is short-sighted and focused on
the price of the shares. On the other hand, in the long term we obtain a profit based on
to the business itself, and the people who run it by betting it will grow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How did you imitate the market?&lt;/strong&gt; Select a set of many companies.&lt;/p&gt;
&lt;p&gt;Blog then launched its first index fund tied to the &lt;a href="https://en.wikipedia.org/wiki/S%26P_500_Index"&gt;S&amp;amp;P500&lt;/a&gt;,
which are the top performing 500 American companies&lt;/p&gt;
&lt;p&gt;The rest is history, and the index became wildly popular.&lt;/p&gt;
&lt;p&gt;Today there are many types of funds. I like &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Environmental,_social_and_corporate_governance"&gt;ESG&lt;/a&gt;&lt;/strong&gt; which are &lt;strong&gt;sustainable funds&lt;/strong&gt;.
It is interesting to point out that, the same money, that is going to feed us, can have an impact (positive or negative) on the world.&lt;/p&gt;
&lt;h4&gt;How to invest&lt;/h4&gt;
&lt;p&gt;Being in the Netherlands is very easy, it can be through the bank's app,
or using &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;Trading 212&lt;/a&gt; (T212). DeGiro is also another popular alternative.&lt;/p&gt;
&lt;p&gt;In T212 they will ask a &lt;em&gt;proof of address&lt;/em&gt;, which can be the water bill for example.
In theory, they open an account that is yours, and they cannot touch it, this
is protected by the European Union laws. I still have a hard time trusting those apps (as an argentinian trust is hard).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are going to open an account in T212, use &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;my referral link&lt;/a&gt; which
give us a share of up to €100 each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depending on the platform you choose, you will have a range of different offers,
and their costs vary. But the cost issue is negligible, so it doesn't matter much.&lt;/p&gt;
&lt;p&gt;Next, I leave a list that you can use as reference, depending on your
platform:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Index Fund&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T212&lt;/td&gt;
&lt;td&gt;100% VWRL FTSE All-World Index (IE00B3RBWM25)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ING Zelf op de beurs&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ABN Amro Zelf Beleggen Basis&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rabobank Zelf Beleggen&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The platform you choose, you search for it in Google, and it will take you where to click
to set up or create an account.&lt;/p&gt;
&lt;p&gt;You may have noticed that for banks it is the same fund the &lt;a href="https://www.northerntrust.com/netherlands/home"&gt;Northern Trust&lt;/a&gt; (NT), this
is so, because they are registered in the Netherlands, and I don't know what mambo they have
that we end up paying less taxes. (Updated &lt;a href="https://woile.dev/posts/into-to-fire-in-the-netherlands/#2021-03-22"&gt;2021-03-22&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;They are also &lt;strong&gt;ESG&lt;/strong&gt;, which stands for "Environmental, social and corporate governance" and that's great.&lt;/p&gt;
&lt;p&gt;T212 does not have the NT funds available, but the Vanguard ones are the most recommended
in most of the world and they are good. I don't know if they have &lt;strong&gt;ESG&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The percentage that appears is how much you have to invest on each one.
If you're going to invest €100, then €88 (88%) goes to World Custom and €12 (12%) to Emerging Market.&lt;/p&gt;
&lt;p&gt;Every month separate a part of your salary, and you buy again in the same funds with the same strategy.&lt;/p&gt;
&lt;p&gt;To see costs, how much we will get back, and more information, a Dutch made the fantastic website &lt;a href="https://www.indexfondsenvergelijken.nl/"&gt;indexfondsenvergelijken.nl&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Taxes&lt;/h3&gt;
&lt;p&gt;You will have to pay taxes on all your assets in the Netherlands, forget about that
and better not fight against it.&lt;/p&gt;
&lt;p&gt;Your &lt;em&gt;assets&lt;/em&gt; are going to have to be reported. Whether you are using the bank or a platform,
Every year, in December, they will send you a report with the value of your investments up to that moment.
That value is what you will have to enter in the affidavit for that year, in the &lt;em&gt;wealth tax (box 3)&lt;/em&gt; part.
Maybe they give you some benefit for buying the NT for example, but I still don't know how it works,
At the moment, I only know that there is some kind of benefit.&lt;/p&gt;
&lt;p&gt;The first €30k if you are single or €60k for couples are tax free.
These values may be updated over the years, so keep an eye on the new policies.
Tea they will collect taxes only on the amount that exceeds that limit.&lt;/p&gt;
&lt;p&gt;If you have €75k, you will be taxed on €15k only.&lt;/p&gt;
&lt;p&gt;This is the table of 2019&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Braket&lt;/th&gt;
&lt;th&gt;Tax&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;€0-€71,650&lt;/td&gt;
&lt;td&gt;0.58%&lt;/td&gt;
&lt;td&gt;€50,000 -&amp;gt; €290&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;€71,651-989,736&lt;/td&gt;
&lt;td&gt;1.34%&lt;/td&gt;
&lt;td&gt;€300,000 -&amp;gt; €4,020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt; €989,737&lt;/td&gt;
&lt;td&gt;1.68%&lt;/td&gt;
&lt;td&gt;€1,100,000 -&amp;gt; €18,480&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Get money from investments&lt;/h3&gt;
&lt;p&gt;Investment funds, bonds, stock, and others, usually produce &lt;a href="https://en.wikipedia.org/wiki/Dividend"&gt;dividends&lt;/a&gt;,
which is the distribution of profits to the shareholders.&lt;/p&gt;
&lt;p&gt;As you are going to be one, that money will come to you.
In general, they deposit it in the platform you use.&lt;/p&gt;
&lt;p&gt;The idea is that once you reach your goal, you live off the dividends, but
sometimes you will also have to sell a small part.&lt;/p&gt;
&lt;p&gt;Let's say you have to take out 4% of your portfolio per year. If the dividends give you
2.5%, you're going to have to sell 1.5%.
But losing that amount shouldn't matter, because you would expect the market to grow again and cover you.&lt;/p&gt;
&lt;p&gt;In the Netherlands, investment funds are required to pay you dividends
at least once a year, during the first 8 months of the year.&lt;/p&gt;
&lt;p&gt;Northern Trust fund, for example, usually pays them in February.&lt;/p&gt;
&lt;h3&gt;You don't live in the Netherlands&lt;/h3&gt;
&lt;p&gt;If you are in the USA, read the book &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to Wealth&lt;/a&gt; that will guide you.&lt;/p&gt;
&lt;p&gt;If you are in another European country you can ask for advice at &lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the principle is the same.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open an investment account in your favourite bank or app.&lt;/li&gt;
&lt;li&gt;Invest in &lt;em&gt;Index Funds&lt;/em&gt; (Northern Trust or Vanguard).&lt;/li&gt;
&lt;li&gt;Make it a habit (schedule your app to do it automatically) and forget about it, it doesn't matter if the market falls, &lt;strong&gt;DON'T SELL&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research pending&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;30% ruling does not need to declare savings and investments? &lt;a href="https://www.xpat.nl/expat-netherlands/legal-financial-netherlands/dutch-taxes/#main:~:text=Box%203%3A%20Taxable%20Income%20from%20Savings%20and%20Investments"&gt;Apparently not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing in "green" stocks increases our maximum to €50k?&lt;/li&gt;
&lt;li&gt;How is the annual rebalancing done?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Updates&lt;/h3&gt;
&lt;h4&gt;2021-03-22 &lt;a name="2021-03-22"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A friend confirmed to me that if you have the ruling 30% you do not pay taxes in BOX 3 for investments or savings, after
talking with the ABN.&lt;/li&gt;
&lt;li&gt;It is possible to leave the bank account open if you are going to live in another country, that is to say that the investments
you can keep driving them there.&lt;/li&gt;
&lt;li&gt;Benefit of having index fund registered in the Netherlands:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Northern Trust indexfunds are domiciled in the Netherlands and thus avoid dividend leakage which increases their returns about 0.25% per year as compared with a similar indexfund or ETF domiciled in Ireland or Luxembourg (as most in Europe are). Dividend leakage means you'd pay capital gains taxes twice on the same gains. A 0.25% difference isn't the end of the world if you take into account you do pay service fees at ABN AMRO and Rabobank while for a similar ETF at DeGiro you wouldn't pay a service fee.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;2022-01-14&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;So far my bank reports a growth of 20% since I started mid 2020 and I've kept the same strategy so far.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recursos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE/comments/flc6d1/all_world_index_portfolios_en_broker_kosten_2020/"&gt;Analysis of the Index Fund and costs 2020 (Dutch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE"&gt;r/DutchFIRE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@nick604?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Nick Chong&lt;/a&gt; on &lt;a href="https://%20unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey hi 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write you can follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>ETF</category><category>fire</category><category>investment</category><category>money</category><category>netherlands</category><guid>https://woile.dev/posts/into-to-fire-in-the-netherlands/</guid><pubDate>Mon, 03 Aug 2020 16:08:26 GMT</pubDate></item><item><title>Automating semver releases with commitizen</title><link>https://woile.dev/posts/automating-semver-releases-with-commitizen/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;&lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; is a great way to version an application.
Languages like rust have &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-cratesio"&gt;fully embraced it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SemVer version looks like this: &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quite simple, right?&lt;/p&gt;
&lt;p&gt;We can map that to &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; where&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAJOR&lt;/code&gt; ➡️ BREAKING CHANGES ⚠️&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt; ➡️ New stuff 🎉&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; ➡️ Security 🔒 and bug fixes 🐛&lt;/p&gt;
&lt;p&gt;That's the highlight.&lt;/p&gt;
&lt;h3&gt;Making a new release&lt;/h3&gt;
&lt;p&gt;Usually, when making a new semantic version (semver), you have to review your
commits, check if there's any braking changes, then check if there are new features,
otherwise, it's just a patch. This process can be tedious, but semver gives
developers a lot of information about a release, like if they can update safely,
new features, or they &lt;strong&gt;must&lt;/strong&gt; update.&lt;/p&gt;
&lt;p&gt;The release process can be fully automated, but it has a price.&lt;/p&gt;
&lt;h3&gt;The Price&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automating release&lt;/h3&gt;
&lt;p&gt;By writing commits this way, we have to think, in that moment, what kind of change
we are introducing. And that information get's encoded in the message.&lt;/p&gt;
&lt;p&gt;Let's see a simple rule for parseable, easy to map messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Include MAJOR:, MINOR:, PATCH: at the beginning of each commit. If not present
the commit will be skipped, and it won't be released.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commits examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAJOR: Change public interface for class User&lt;/p&gt;
&lt;p&gt;MINOR: Add new type of user (employee)&lt;/p&gt;
&lt;p&gt;PATCH: Fix full name not being displayed properly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's it! The next step is to use a tool to collect the commits, and generate
the correct &lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Commit tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Talk imperative and follow this rule: &lt;code&gt;If applied, this commit will &amp;lt;commit message&amp;gt;&lt;/code&gt; &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keep the subject short&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introducing commitizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;Commitizen&lt;/a&gt; is a tool to do exactly that.&lt;/p&gt;
&lt;p&gt;I created it in order to automate that process. Based on existing tools from
the JS ecosystem but which I found hard to use.&lt;/p&gt;
&lt;p&gt;By default it parses the widely popular commit rules: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But you can &lt;a href="https://commitizen-tools.github.io/commitizen/customization/#2-customize-through-customizing-a-class"&gt;easily extend commitizen&lt;/a&gt; to create the example given before.&lt;/p&gt;
&lt;p&gt;Not only it will create the version, but it can also generate the changelog.&lt;/p&gt;
&lt;p&gt;It's really easy to use, first create a &lt;code&gt;.cz.toml&lt;/code&gt; file in your project's root.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"2.5.1"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"setup.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Dockerfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"src/__version__.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scripts/publish"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's it, by running a single command we get the version and the changelog.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;veresion_files&lt;/code&gt; will also bump the version in the specified files.&lt;/p&gt;
&lt;h3&gt;CI/CD&lt;/h3&gt;
&lt;p&gt;&lt;img alt="diagram of semantic release" src="https://woile.dev/images/automating-deployment-with-commitizen/semantic_release.png"&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, you'd execute commitizen during the "merge job" (green in the diagram), where "bump version" is highlighted.&lt;/p&gt;
&lt;p&gt;For example, if you are using Github Actions, you'd add this to your job:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commitizen then, will generate a new commit, with the updated version in the files and the changelog; and a new tag.&lt;/p&gt;
&lt;p&gt;Both are pushed back.&lt;/p&gt;
&lt;p&gt;For the new commit, we should not trigger again the CI.&lt;/p&gt;
&lt;p&gt;The new tag, instead, should trigger another job, "tag job" (purple in the diagram), which will take care of the release, which can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deploying to kubernetes&lt;/li&gt;
&lt;li&gt;publishing to pypi/npm/cargo&lt;/li&gt;
&lt;li&gt;deploying to a cloud service, like AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;Recap&lt;/h3&gt;
&lt;h4&gt;Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Price&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Command&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Try commitizen and check the &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We aim for simplicity, trying to make this process as simple as possible, but
the tool is quite flexible, explore it, and see if it fits for your use cases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>ci</category><category>python</category><guid>https://woile.dev/posts/automating-semver-releases-with-commitizen/</guid><pubDate>Wed, 15 Jul 2020 15:27:20 GMT</pubDate></item><item><title>Helm 3 - Crafting a Chart</title><link>https://woile.dev/posts/helm-3-crafting-a-chart/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;This post focuses on &lt;strong&gt;creating and releasing a chart&lt;/strong&gt;, not consuming from a Helm Chart Repository.&lt;/p&gt;
&lt;p&gt;Helm is an &lt;strong&gt;advanced&lt;/strong&gt; tool used by kubernetes people, some "lingo" (jargon) is used here.
Please leave a comment if you want more information.&lt;/p&gt;
&lt;p&gt;Helm allows to &lt;strong&gt;"package"&lt;/strong&gt; kubernetes applications, it simplifies the distribution
and installation. While doing so, it checks dependencies versions and some other validations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://helm.sh/docs/intro/"&gt;Official Helm 3 Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Version used&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ helm version --short
v3.2.4+g0ad800e
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Helm Chart&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A Chart is a Helm package. It contains all of the resource definitions necessary to run an application,
tool, or service inside of a Kubernetes cluster. Think of it as the Kubernetes equivalent of a
Homebrew formula, an apt dpkg, or a Yum RPM file &lt;a href="https://helm.sh/docs/intro/using_helm/#three-big-concepts"&gt;[0]&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For OOP people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chart ~= class&lt;/li&gt;
&lt;li&gt;Release ~= instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is important to remember, we are going to be building a &lt;strong&gt;package&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Development of a Chart&lt;/h3&gt;
&lt;h4&gt;Creating a new Chart&lt;/h4&gt;
&lt;p&gt;My recommendation is to create a &lt;code&gt;charts/&lt;/code&gt; folder in the root of your project(s).&lt;/p&gt;
&lt;p&gt;This way each of your projects could become a "chart repository", similar to how hub.helm.sh consumes respositories from different sources in a descentralized way.&lt;/p&gt;
&lt;p&gt;You could do the same for your projects. Each git project becomes a descentralized chart repository,
or you can publish to a centralized chart repository like artifactory or your own github repo.&lt;/p&gt;
&lt;p&gt;In any case, calling it &lt;code&gt;charts/&lt;/code&gt; is informative and flexible enough to choose any option.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;charts/&lt;/code&gt;, we are going to use &lt;code&gt;helm&lt;/code&gt; to create the first boilerplate of our app.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm create &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;p&gt;Along the post we'll use &lt;code&gt;auth-service&lt;/code&gt; as our project example name.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;mkdir auth-service
&lt;span class="nb"&gt;cd&lt;/span&gt; auth-service/
mkdir charts
&lt;span class="nb"&gt;cd&lt;/span&gt; charts/
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm create auth-service
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Structure&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;auth-service/
└── charts/
    └── auth-service/
        ├── charts/
        ├── Chart.yaml
        ├── templates/
        │   ├── deployment.yaml
        │   ├── _helpers.tpl
        │   ├── hpa.yaml
        │   ├── ingress.yaml
        │   ├── NOTES.txt
        │   ├── serviceaccount.yaml
        │   ├── service.yaml
        │   └── tests/
        │       └── test-connection.yaml
        └── values.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appVersion&lt;/code&gt; inside &lt;code&gt;Chart.yaml&lt;/code&gt; references the &lt;strong&gt;application version&lt;/strong&gt; &lt;a href="https://stackoverflow.com/a/60054111/2047185"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image.tag&lt;/code&gt; inside &lt;code&gt;values.yaml&lt;/code&gt; references the &lt;strong&gt;docker image version/tag&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;image.tag&lt;/code&gt; is skipped, &lt;code&gt;appVersion&lt;/code&gt; is used instead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;recommendation&lt;/strong&gt;: use a tool to automatically bump the version, like &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt;,
during the CI execution, and push back to the repo.&lt;/li&gt;
&lt;li&gt;Whether to use &lt;code&gt;image.tag&lt;/code&gt; or &lt;code&gt;appVersion&lt;/code&gt; is still under debate, you can read more in the
&lt;a href="https://github.com/helm/helm/issues/8194"&gt;github issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;appVersion&lt;/code&gt; you can use &lt;code&gt;helm history &amp;lt;release_name&amp;gt;&lt;/code&gt; to get info on the versions
per revision.&lt;/li&gt;
&lt;li&gt;You can re-use the same chart to deploy multiple django/rails applications, &lt;a href="https://github.com/helm/helm/issues/8194#issuecomment-658715462"&gt;seems like a
common practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chart customization&lt;/h4&gt;
&lt;p&gt;I recommend to start with the default helm chart and from there, start
adding any extra stuff that you need.&lt;/p&gt;
&lt;h4&gt;Templating&lt;/h4&gt;
&lt;p&gt;If you have used other template systems like &lt;code&gt;jinja&lt;/code&gt;, or Django's template engine,
Helm's system is not that different: you can apply functions using a pipeline &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;.Values.favorite.food | upper | quote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avoid adding complex template tags; the purpose of &lt;code&gt;yaml&lt;/code&gt; is to be &lt;strong&gt;readable&lt;/strong&gt;.
By using templates, we make things more complex, and less readable, &lt;strong&gt;touch only when necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;templates/_helpers.tpl&lt;/code&gt; contains custom functions for your templates, like generating the release name based on values.&lt;/p&gt;
&lt;p&gt;To find problems with you charts, run:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm lint &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Values&lt;/h4&gt;
&lt;p&gt;Place the "configuration" that you want to expose to the users of the chart in
the &lt;code&gt;values.yaml&lt;/code&gt;, even if it's you who's gonna end up using it.
There's no need to parametrize everything, and try to use sensible defaults.&lt;/p&gt;
&lt;p&gt;A good rule is to expose only the things you are going to use and make new
parameters only when you have to.&lt;/p&gt;
&lt;p&gt;Let developers specify unconventional aspects of the application.&lt;/p&gt;
&lt;p&gt;You can also define a &lt;code&gt;values.schema.json&lt;/code&gt; which will be used by helm to validate
the parameters given to Helm &lt;a href="https://helm.sh/docs/topics/charts/#schema-files"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Using custom values&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;values.yaml&lt;/code&gt; is used as default and any extra values provided through &lt;code&gt;--set&lt;/code&gt; or &lt;code&gt;--values&lt;/code&gt;
will be merged into the default &lt;code&gt;values.yaml&lt;/code&gt; inside the chart.&lt;/p&gt;
&lt;p&gt;There are 2 approaches to deal with custom values that I know.&lt;/p&gt;
&lt;h5&gt;Centralized values&lt;/h5&gt;
&lt;p&gt;The first one is to have a centralized place with all the configuration. At the
moment, I know &lt;a href="https://github.com/roboll/helmfile"&gt;helmfile&lt;/a&gt; is being used for this.
You'd specify every configuration per environment per chart in a &lt;code&gt;helmfile.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;Per repository&lt;/h5&gt;
&lt;p&gt;This is the most popular approach. Each "project" is responsible to set the values
per enviroment (&lt;code&gt;production&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you are going to modify small aspects of your app, using &lt;code&gt;--set&lt;/code&gt; should be enough.&lt;/p&gt;
&lt;p&gt;A common practice, is to place the production and staging files inside the chart folder,
but in my opinion this should be avoided when possible.&lt;/p&gt;
&lt;p&gt;A Helm chart is a package: &lt;strong&gt;Helm is a package manager&lt;/strong&gt;.
Like apt, pip or npm.
When we use tools like Docker, for example, we provide env variables from outside, they are
not packaged inside the image. This gives the container a lot of flexibility and the
same principle applies to Helm. There's an interesting &lt;a href="https://github.com/helm/helm/issues/6715"&gt;discussion in the helm repo&lt;/a&gt;
about this.&lt;/p&gt;
&lt;p&gt;Ideally, your custom values should live outside the chart, and they should be given to the chart.&lt;/p&gt;
&lt;p&gt;Let's see a setup example for the &lt;code&gt;auth-service&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;auth-service/
├── charts/
│   └── auth-service/
├── charts-values/
│   ├── production/
│   │   ├── redis.yaml
│   │   └── auth-service.yaml
│   └── staging/
│       └── auth-service.yaml
└── src/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The installation command would look like&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm install --values charts-values/production/auth-service.yaml auth-service-prod ./auth-service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm not 100% happy with the above setup, mainly with the naming.
But it allows having multiple values per chart per environment.
We could easily add values for a redis pulled from the official Helm hub.
I'd like to hear opinions about it. How'd you do it?&lt;/p&gt;
&lt;h3&gt;Release&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A Release is an instance of a chart running in a Kubernetes cluster. One chart can often be installed many times into the same cluster. And each time it is installed, a &lt;strong&gt;new release is created&lt;/strong&gt;.
Consider a MySQL chart. If you want two databases running in your cluster, you can install that chart twice. Each one will have its own release, which will in turn have its own release name &lt;a href="https://helm.sh/docs/intro/using_helm/#three-big-concepts"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;New release&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm install &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Deploy a new release to the cluster.&lt;/p&gt;
&lt;p&gt;We can also run a dry-run to check what's going to happen:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm install &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt; --dry-run
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm install auth-service-prod ./auth-service
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package_name&lt;/code&gt; can be a folder, a &lt;code&gt;.tgz&lt;/code&gt; or a url.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release_name&lt;/code&gt;: the name of this particular release. If the name is different another "instance" will be deployed. So for redis instances it may be worth using different &lt;code&gt;release_name&lt;/code&gt;s, but for your JavaScript app it may not.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;templates/NOTES.txt&lt;/code&gt; is shown in the prompt when making a new release, useful for CI logs.&lt;/li&gt;
&lt;li&gt;If you don't want to provide a &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;, use &lt;code&gt;--generate-name&lt;/code&gt; and it will assign a random &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Helm stores release config per namespace, so if you want to release 2 redis instances in the same namespace, they should have different &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;s &lt;a href="https://github.com/helm/community/blob/master/helm-v3/003-state.md#namespacing-changes"&gt;[4]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Helm does not wait until all of the resources are running before it exits &lt;a href="https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package"&gt;[5]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;personal&lt;/strong&gt;: use different &lt;code&gt;release_name&lt;/code&gt;s per environment (&lt;code&gt;production&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;). Even though it may not be necessary, giving that extra information in the name is useful and cheap.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;helm get values &amp;lt;release_name&amp;gt;&lt;/code&gt; to get the values used for the release, useful to check if our custom values were applied properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Check release status&lt;/h4&gt;
&lt;p&gt;After it is installed, we want to know if everything went well.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm status &amp;lt;release_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm status auth-service-prod
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;An upgrade takes an existing release and upgrades it according to the information you provide. Because Kubernetes charts can be large and complex, Helm tries to perform the &lt;strong&gt;least invasive upgrade&lt;/strong&gt;. It will only update things that have changed &lt;strong&gt;since the last release&lt;/strong&gt;. &lt;a href="https://helm.sh/docs/intro/using_helm/#helm-upgrade-and-helm-rollback-upgrading-a-release-and-recovering-on-failure"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Uprgrade release&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm upgrade -f &amp;lt;custom_values.yaml&amp;gt; &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm upgrade -f charts-values/production/auth-service.yaml auth-service-prod ./auth-service
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Rollback release&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm rollback &amp;lt;release_name&amp;gt; &amp;lt;revision&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm rollback auth-service-prod &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Any release version increment will produce a &lt;code&gt;revision&lt;/code&gt; number. It goes from 1..N.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;helm history &amp;lt;release_name&amp;gt;&lt;/code&gt; to see the revisions of your &lt;code&gt;release_name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Uninstall release&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm uninstall &amp;lt;release_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I won't go deep into this, but just know it exists, and you can remove an existing release.&lt;/p&gt;
&lt;h4&gt;Automating release cycle&lt;/h4&gt;
&lt;p&gt;A recommended best practice to avoid running &lt;code&gt;helm install&lt;/code&gt; and &lt;code&gt;helm upgrade&lt;/code&gt; &lt;a href="https://helm.sh/docs/howto/charts_tips_and_tricks/#install-or-upgrade-a-release-with-one-command"&gt;[7]&lt;/a&gt; is to use:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm upgrade --install &amp;lt;release_name&amp;gt; --values &amp;lt;custom_values.yaml&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be a benefit in an automated CI/CD pipeline. We let Helm perform the check to know if it's a first time,
or a release upgrade.&lt;/p&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;helm upgrade --install auth-service-prod --values charts-values/production/auth-service.yaml ./auth-service
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;--atomic&lt;/code&gt; to get automatic rollback on failures.&lt;a href="https://lzone.de/blog/Helm-Best-Practices"&gt;[8]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Complex Charts with Many Dependencies&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The current best practice for composing a complex application from discrete parts is to create a top-level umbrella chart that exposes the global configurations, and then use the charts/ subdirectory to embed each of the components.&lt;a href="https://helm.sh/docs/howto/charts_tips_and_tricks/#complex-charts-with-many-dependencies"&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is an improving point; I haven't understood it by reading the documentation yet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>helm</category><category>kubernetes</category><guid>https://woile.dev/posts/helm-3-crafting-a-chart/</guid><pubDate>Wed, 15 Jul 2020 13:20:41 GMT</pubDate></item><item><title>Pyenv</title><link>https://woile.dev/posts/pyenv/</link><dc:creator>Woile</dc:creator><description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; is a shell script to manage python versions.
Works in the user space, avoiding the system's python, therefore is less error prone.
You can also control a per directory version (this creates a &lt;code&gt;.python-version&lt;/code&gt;).
Doesn't require python.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://github.com/pyenv/pyenv-installer"&gt;pyenv-installer&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;curl https://pyenv.run &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt;  &lt;span class="c1"&gt;# Restart shell or open new terminal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;Install different python versions&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.6.10
pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.7.6
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Set global python&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.7.6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Observe&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;python --version
&lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Set local python&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/my-project
pyenv &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.6.10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Observe&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cat .python-version
python --version
&lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Other languages&lt;/h4&gt;
&lt;p&gt;There's a set of similar tools for other languages, following the
same convention here, so if you know &lt;code&gt;pyenv&lt;/code&gt;, you know &lt;code&gt;nodenv&lt;/code&gt; for example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ruby:&lt;/strong&gt; &lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;javascript:&lt;/strong&gt; &lt;a href="https://github.com/nodenv/nodenv"&gt;nodenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;go:&lt;/strong&gt; &lt;a href="https://github.com/syndbg/goenv"&gt;goenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;php:&lt;/strong&gt; &lt;a href="https://github.com/phpenv/phpenv"&gt;phpenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/intro-to-pyenv/"&gt;In depth tutorial by real python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;Official docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>python</category><category>python-versions</category><category>tutorial</category><guid>https://woile.dev/posts/pyenv/</guid><pubDate>Wed, 08 Jul 2020 09:07:26 GMT</pubDate></item><item><title>2019 yearly retrospective</title><link>https://woile.dev/posts/2019-yearly-retrospective/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;So far it's been great. I just wanted to write a recap for my future self.&lt;/p&gt;
&lt;h3&gt;Life&lt;/h3&gt;
&lt;p&gt;This year will be almost 3 years since I've been in Amsterdam. I love living here.
The more I think about it the more I'm sure of it: &lt;strong&gt;Amsterdam (or the whole Netherlands) is a bubble&lt;/strong&gt;,
even in Europe.
Most people move around in their bikes, everything just works, everyone enjoys living here,
there's a huge balance between nature and city.
It's a cosmopolitan city, full of diversity, alive, but it looks like a small town.&lt;/p&gt;
&lt;p&gt;Of course it's not perfect and it has its issues, but nothing can be perfect.&lt;/p&gt;
&lt;h3&gt;Friends&lt;/h3&gt;
&lt;p&gt;This year I've made a lot of friends, most of them Argentinians.
It's always nice to experience life with friends. I'm thankful for it.&lt;/p&gt;
&lt;p&gt;I'm lucky enough to have many friends in many different places, with different ideas,
desires, experiences. They enrich my mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: keep making friends; most people are interesting&lt;/p&gt;
&lt;h3&gt;Books&lt;/h3&gt;
&lt;p&gt;This year I read 10 out of 12 books I wanted to read.
Pretty good, but next year I'll read more.
I feel that in this era of information overload, books are a way to get "curated" information.&lt;/p&gt;
&lt;h3&gt;Travel&lt;/h3&gt;
&lt;p&gt;Thanks to randomness and myself, I have the chance to travel quite often.
This year I've been to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alicante, Spain on my first climbing trip.&lt;/li&gt;
&lt;li&gt;Tignes, France on my first ski trip.&lt;/li&gt;
&lt;li&gt;Sharm El Sheikh, Egypt to dive.&lt;/li&gt;
&lt;li&gt;Istanbul, Turkey and its other cities for tourism.&lt;/li&gt;
&lt;li&gt;London, UK to visit my sister.&lt;/li&gt;
&lt;li&gt;Basel, Switzerland attending to attend the Europython conference.&lt;/li&gt;
&lt;li&gt;Bordeaux, France to give a talk at PyCon France.&lt;/li&gt;
&lt;li&gt;Gent, Belgium for a festival.&lt;/li&gt;
&lt;li&gt;Giethoorn, The Netherlands with my mom.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've reduced the amount of flights I take, in order to reduce my environment impact.
And I also don't enjoy flying.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: traveling expands my mind&lt;/p&gt;
&lt;h3&gt;Hobby&lt;/h3&gt;
&lt;p&gt;This year I've released 2 apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rentee.app"&gt;rentee.app&lt;/a&gt; (may not work now due to certificates)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veck.app"&gt;veck.app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one took around 2 years to be built and the second around 2 weeks.
Of course, the later was built after the lessons learned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: release early&lt;/p&gt;
&lt;p&gt;As of today I think that validating against your users is the best way to build services or products,
&lt;strong&gt;build a core&lt;/strong&gt; and go public. Make a short list of what must be done, and launch.&lt;/p&gt;
&lt;p&gt;I still have to learn how to communicate and reach wider audiences, but it's going well so far.&lt;/p&gt;
&lt;p&gt;I'm thankful for having a bunch of enthusistic friends to work with them in our
ideas and projects.&lt;/p&gt;
&lt;h3&gt;Languages&lt;/h3&gt;
&lt;p&gt;I've been trying to improve my Dutch for some time now.
This last time I've barely started to feel a bit comfortable with it.
My Duolingo streak is 363 days so far, and I don't plan on stopping.&lt;/p&gt;
&lt;p&gt;Regarding programming languages, this year I've talked in some conferences and meetups,
contributed to many open source projects and now I'm also trying to help people who want to learn
(if you want to, you can always write me for advice).&lt;/p&gt;
&lt;p&gt;Special mention to the &lt;strong&gt;Python programming language&lt;/strong&gt;, thanks to whom,
I can do a lot of things in my life :)&lt;/p&gt;
&lt;p&gt;Next year, I'll try to focus more on languages like rust, which attract me a lot.&lt;/p&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;p&gt;My current job so far is great, and I'm thankful for it.
I work from Monday to Thursday and on Fridays, they let me work on myself.
The schedule is flexible and no one in my team is counting hours;
they count the work done instead.
I won't go into detail because it's stuff I build for the company.&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;Things I plan to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a podcast about history.&lt;/li&gt;
&lt;li&gt;Build (paid) services that help people.&lt;/li&gt;
&lt;li&gt;Build useful apps for fun.&lt;/li&gt;
&lt;li&gt;Learn another programming language.&lt;/li&gt;
&lt;li&gt;Read more books.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and follow me on Twitter &lt;a href="https://twitter.com/santiwilly"&gt;santiwilly&lt;/a&gt; if you want to know more about my future.&lt;/p&gt;</description><category>self</category><guid>https://woile.dev/posts/2019-yearly-retrospective/</guid><pubDate>Tue, 31 Dec 2019 16:40:35 GMT</pubDate></item></channel></rss>