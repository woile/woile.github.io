<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog (Posts about ci)</title><link>https://woile.dev/</link><description></description><atom:link href="https://woile.dev/categories/ci.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2022 &lt;a href="mailto:santiwilly@gmail.com"&gt;Woile&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jan 2022 11:21:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Automating semver releases with commitizen</title><link>https://woile.dev/posts/automating-semver-releases-with-commitizen/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;&lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; is a great way to version an application.
Languages like rust have &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-cratesio"&gt;fully embraced it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SemVer version looks like this: &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quite simple, right?&lt;/p&gt;
&lt;p&gt;We can map that to &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; where&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAJOR&lt;/code&gt; ‚û°Ô∏è BREAKING CHANGES ‚ö†Ô∏è&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt; ‚û°Ô∏è New stuff üéâ&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; ‚û°Ô∏è Security üîí and bug fixes üêõ&lt;/p&gt;
&lt;p&gt;That's the highlight.&lt;/p&gt;
&lt;h3&gt;Making a new release&lt;/h3&gt;
&lt;p&gt;Usually, when making a new semantic version (semver), you have to review your
commits, check if there's any braking changes, then check if there are new features,
otherwise, it's just a patch. This process can be tedious, but semver gives
developers a lot of information about a release, like if they can update safely,
new features, or they &lt;strong&gt;must&lt;/strong&gt; update.&lt;/p&gt;
&lt;p&gt;The release process can be fully automated, but it has a price.&lt;/p&gt;
&lt;h3&gt;The Price&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automating release&lt;/h3&gt;
&lt;p&gt;By writing commits this way, we have to think, in that moment, what kind of change
we are introducing. And that information get's encoded in the message.&lt;/p&gt;
&lt;p&gt;Let's see a simple rule for parseable, easy to map messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Include MAJOR:, MINOR:, PATCH: at the beginning of each commit. If not present
the commit will be skipped, and it won't be released.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commits examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAJOR: Change public interface for class User&lt;/p&gt;
&lt;p&gt;MINOR: Add new type of user (employee)&lt;/p&gt;
&lt;p&gt;PATCH: Fix full name not being displayed properly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's it! The next step is to use a tool to collect the commits, and generate
the correct &lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Commit tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Talk imperative and follow this rule: &lt;code&gt;If applied, this commit will &amp;lt;commit message&amp;gt;&lt;/code&gt; &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keep the subject short&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introducing commitizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;Commitizen&lt;/a&gt; is a tool to do exactly that.&lt;/p&gt;
&lt;p&gt;I created it in order to automate that process. Based on existing tools from
the JS ecosystem but which I found hard to use.&lt;/p&gt;
&lt;p&gt;By default it parses the widely popular commit rules: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But you can &lt;a href="https://commitizen-tools.github.io/commitizen/customization/#2-customize-through-customizing-a-class"&gt;easily extend commitizen&lt;/a&gt; to create the example given before.&lt;/p&gt;
&lt;p&gt;Not only it will create the version, but it can also generate the changelog.&lt;/p&gt;
&lt;p&gt;It's really easy to use, first create a &lt;code&gt;.cz.toml&lt;/code&gt; file in your project's root.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"2.5.1"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"setup.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Dockerfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"src/__version__.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scripts/publish"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And that's it, by running a single command we get the version and the changelog.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;veresion_files&lt;/code&gt; will also bump the version in the specified files.&lt;/p&gt;
&lt;h3&gt;CI/CD&lt;/h3&gt;
&lt;p&gt;&lt;img alt="diagram of semantic release" src="https://woile.dev/images/automating-deployment-with-commitizen/semantic_release.png"&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, you'd execute commitizen during the "merge job" (green in the diagram), where "bump version" is highlighted.&lt;/p&gt;
&lt;p&gt;For example, if you are using Github Actions, you'd add this to your job:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Commitizen then, will generate a new commit, with the updated version in the files and the changelog; and a new tag.&lt;/p&gt;
&lt;p&gt;Both are pushed back.&lt;/p&gt;
&lt;p&gt;For the new commit, we should not trigger again the CI.&lt;/p&gt;
&lt;p&gt;The new tag, instead, should trigger another job, "tag job" (purple in the diagram), which will take care of the release, which can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deploying to kubernetes&lt;/li&gt;
&lt;li&gt;publishing to pypi/npm/cargo&lt;/li&gt;
&lt;li&gt;deploying to a cloud service, like AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;Recap&lt;/h3&gt;
&lt;h4&gt;Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Price&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Command&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Try commitizen and check the &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We aim for simplicity, trying to make this process as simple as possible, but
the tool is quite flexible, explore it, and see if it fits for your use cases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello üëã&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>ci</category><category>python</category><guid>https://woile.dev/posts/automating-semver-releases-with-commitizen/</guid><pubDate>Wed, 15 Jul 2020 15:27:20 GMT</pubDate></item></channel></rss>