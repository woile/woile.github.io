<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog (Publicaciones sobre logging)</title><link>https://woile.dev/</link><description></description><atom:link href="https://woile.dev/es/categories/logging.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2023 &lt;a href="mailto:santiwilly@gmail.com"&gt;Woile&lt;/a&gt; </copyright><lastBuildDate>Sun, 15 Jan 2023 08:57:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Logging in python</title><link>https://woile.dev/es/posts/logging-in-python/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For future reference, this is my logging configuration for a new project.&lt;/p&gt;
&lt;p&gt;It is not intended for libraries which already have some kind of set up in place, like django.&lt;/p&gt;
&lt;h3&gt;Simple logging configuration&lt;/h3&gt;
&lt;p&gt;This is a good configuration to start logging right away.
You can use it when you have a single file, or you can share the &lt;code&gt;logger&lt;/code&gt; if stored in a separated file,
which is not recommended when you start growing.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import logging
import os
import sys

LOGLEVEL = os.environ.get('LOGLEVEL', 'INFO').upper()
logger = logging.getLogger("my_app")
logger.setLevel(LOGLEVEL)
console_handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter("[%(asctime)s] %(name)s:%(lineno)d %(levelname)s :: %(message)s")
console_handler.setFormatter(formatter)
console_handler.setLevel(LOGLEVEL)
logger.addHandler(console_handler)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("An info log")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also replace &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;pathname&lt;/code&gt; to get the full path.&lt;/p&gt;
&lt;h3&gt;Project-wide logging configuration&lt;/h3&gt;
&lt;p&gt;In this case we want to configure the logs once, by using the popular dict logging conf:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# ./my_app/logs.py
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(name)s:%(lineno)d %(levelname)s :: %(message)s"
        },
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "formatter": "standard",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",  # Default is stderr
        },
    },
    "loggers": {
        "": {  # root logger
            "handlers": ["default"],
            "level": "WARNING",
            "propagate": False,
        },
        "__main__": {  # if __name__ == '__main__'
            "handlers": ["default"],
            "level": "DEBUG",
            "propagate": False,
        },
        "my_app": {  # folder
            "handlers": ["default"],
            "level": "INFO",
            "propagate": False
        },
    },
}

import logging.config

def init():
    # Run once at startup:
    logging.config.dictConfig(LOGGING_CONFIG)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# ./my_app/foo.py
import logs

logs.init()
logger = logging.getLogger(__name__)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("Hello world")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And your folder structure should look something like:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;my-app/
└── my_app/
    ├── foo.py
    └── logs.py&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Structured logging&lt;/h3&gt;
&lt;p&gt;Structured logs are usually in JSON format, making it easy for machines to parse and index them. See for example &lt;a href="https://www.elastic.co/blog/structured-logging-filebeat"&gt;structured logging with filebeat&lt;/a&gt;.
A common format is bunyan, based on &lt;a href="https://github.com/trentm/node-bunyan"&gt;bunyan-node&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;pip install bunyan&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import logging
import bunyan
import sys

logger = logging.getLogger("my_app")
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stdout)
formatter = bunyan.BunyanFormatter()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("Hello world")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this script would only show the &lt;code&gt;info&lt;/code&gt; logger, and it would look like this:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{"name": "my_app", "msg": "Hello world", "time": "2022-06-21T07:41:06Z", "hostname": "&amp;lt;REDACTED&amp;gt;", "level": 30, "pid": 40625, "v": 0}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For local development, pipe the logs to the buyan cli, so they become friendly for developers.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;wget -c https://github.com/LukeMathWalker/bunyan/releases/download/v0.1.7/bunyan-v0.1.7-x86_64-unknown-linux-gnu.tar.gz -O - | tar -xz

python my_app.py | ./bunyan&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Docker issues&lt;/h3&gt;
&lt;p&gt;Sometimes the logs are not sent to the terminal right away, specially if something is blocking. To prevent this, send right away the output to the terminal by setting the env &lt;code&gt;PYTHONUNBUFFERED=1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Dockerfile&lt;/h4&gt;
&lt;p&gt;Include this line&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-dockerfile"&gt;ENV PYTHONUNBUFFERED 1&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Running docker&lt;/h3&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;docker run --env "PYTHONUNBUFFERED=1" python:slim bash&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Docker-compose&lt;/h3&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;version: '3'
services:
  my_app:
    # ...
    environment:
      - PYTHONUNBUFFERED=1&lt;/code&gt;&lt;/pre&gt;</description><guid>https://woile.dev/es/posts/logging-in-python/</guid><pubDate>Wed, 11 May 2022 13:21:55 GMT</pubDate></item></channel></rss>