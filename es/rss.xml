<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog</title><link>https://woile.dev/</link><description>Software Engineer, Python dev</description><atom:link href="https://woile.dev/es/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents Â© 2022 &lt;a href="mailto:santiwilly@gmail.com"&gt;Woile&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jan 2022 11:21:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Layout Team</title><link>https://woile.dev/es/posts/the-layout-team/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For the last couple of months I've had this idea spinning in my head, which I'm
calling:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Layout Team&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is a work in progress and I'll try to update it when new things come to my mind.
The topic can be discussed forever, I will try to formalize the idea while keeping
it short.&lt;/p&gt;
&lt;p&gt;I see how the frontend industry is led mostly by hype, and this time I'm not fond of the
direction we are going, specifically with micro-frontends. This pattern,
spite of its benefits, I don't think it can be
implemented properly by most teams, and it's not an idea we should keep suggesting.&lt;/p&gt;
&lt;p&gt;Instead, I'm going to propose an alternative, mostly in the middle.
And as you probably guessed... it's "The Layout Team".&lt;/p&gt;
&lt;p&gt;As far as I'm concerned, the ultimate goal of a frontend is to deliver a good
user experience, and this includes being fast.&lt;/p&gt;
&lt;p&gt;Micro-frontends, make this target hard to achieve.
If you pull parts from all around it will take longer than pulling from a single
place. Of course some teams can accomplish this (out of the question), and they may need it,
but most of the time, is not required, but... what do we do then?&lt;/p&gt;
&lt;p&gt;The main issue to me, is that a frontend application has to be &lt;strong&gt;glued together&lt;/strong&gt; at
some point, or somewhere. Whether you use a micro-frontend architecture or a monorepo, the final
user has to experience one cohesive app, this is &lt;strong&gt;different&lt;/strong&gt; to backends, there's no UI there,
mostly machines talk with APIs. Your frontend talks with the API, but the human interacts with
the frontend.&lt;/p&gt;
&lt;p&gt;Hence the introduction of &lt;strong&gt;"The Layout Team"&lt;/strong&gt; (I'm giving it a formal name)&lt;/p&gt;
&lt;p&gt;This team could have many different flavours.
But ideally, it should be an independent team, holding ownership of the layout of the app.&lt;/p&gt;
&lt;p&gt;Yes, there's nothing fancy here, and the title is self-explanatory.&lt;/p&gt;
&lt;p&gt;The Layout Team maintains the layout, and checks that everyone operates inside the
boundaries created by this team.&lt;/p&gt;
&lt;p&gt;Its responsibilities include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor styles to prevent overlapping components or breaking issues&lt;/li&gt;
&lt;li&gt;Review Pull Requests&lt;/li&gt;
&lt;li&gt;Train other developers, whether through quarterly presentations or one-to-one coaching, but
do it consistently over time. Not fire and forget.&lt;/li&gt;
&lt;li&gt;Maintain &lt;em&gt;some&lt;/em&gt; shared state (logged user or is_authenticated or any other herbs).
But most of the times teams should be able to add and manage their own global state&lt;/li&gt;
&lt;li&gt;Write tools to assist other teams, like linters to prevent CSS or JS, where&lt;/li&gt;
&lt;li&gt;Identify CSS or JS code that may affect the whole app, and potentially code them
into the linters. Example:&lt;ul&gt;
&lt;li&gt;Do not use fixed/absolute because... (unless approved to do so)&lt;/li&gt;
&lt;li&gt;Do not use negative margins because we found that no one knows who to...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write tests for the layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One easy way to do this, is by having a monorepo (recommended). The layout for the different pages
is defined by "The Layout Team", and the rest of the teams write components,
which can be later placed in the places designated by the layout team.&lt;/p&gt;
&lt;p&gt;By doing this, it becomes very easy to produce a small bundle. Because the dependencies
are shared. It's then potentially easier, to identify shared code and cache it in a
separate bundle across the application.&lt;/p&gt;
&lt;p&gt;One of the "benefits" of micro-frontend is supposed to be the freedom for teams to
choose what framework to use, but you end up sending bigger assets to the end user.
This goes against optimizing for the best user experience. So ideally, stick
to a single framework, and deliver it once.&lt;/p&gt;
&lt;p&gt;If you are using React in your monorepo, it means everyone will stick to that
version. If you have multiple repos, even if everyone uses the same framework,
you may end up with different versions, or even the same and still delivering them
as part of each apps bundle!&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;The Layout Team&lt;/strong&gt; leverages the use of &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; heavily.
They shape the app over time. And create &lt;em&gt;slots&lt;/em&gt; for each team.&lt;/p&gt;
&lt;p&gt;Let's see an example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"box grid grid-cols-2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamA"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamA&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamB"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamB&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teamC"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ComponentFromTeamC&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;style&gt;
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid {
    display: grid;
  }
  .box {
    margin: 0.75rem;
    width: 90%;
    border-width: 4px;
    border-style: solid;
    --tw-border-opacity: 1;
    border-color: rgba(107, 114, 128, var(--tw-border-opacity));
    padding: 0.75rem;
  }
  .teamBox {
    margin: 0.25rem;
    border-width: 4px;
    border-style: dashed;
    padding: 0.5rem;
  }
  .border-indigo-500 {
    --tw-border-opacity: 1;
    border-color: rgba(99, 102, 241, var(--tw-border-opacity));
  }
  .border-red-500 {
    --tw-border-opacity: 1;
    border-color: rgba(239, 68, 68, var(--tw-border-opacity));
  }
  .border-green-500 {
    --tw-border-opacity: 1;
    border-color: rgba(16, 185, 129, var(--tw-border-opacity));
  }
&lt;/style&gt;

&lt;div class="box grid grid-cols-2"&gt;
  &lt;div class="teamBox border-indigo-500" maintainer="teamA"&gt;TEAM A&lt;/div&gt;
  &lt;div&gt;
    &lt;div class="teamBox border-red-500" maintainer="teamB"&gt;TEAM B&lt;/div&gt;
    &lt;div class="teamBox border-green-500" maintainer="teamC"&gt;TEAM C&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;- Hey! It's almost the same example as a micro-frontend!&lt;/p&gt;
&lt;p&gt;- Well... yes, what did you expect?&lt;/p&gt;
&lt;p&gt;Each team now has a space to place their components, and there's full visibility
over who maintains what.&lt;/p&gt;
&lt;p&gt;It is very important, that the people, that are part of this team,
understand &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; very well.&lt;/p&gt;
&lt;p&gt;Useful layout resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;guide to flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://1linelayouts.glitch.me/"&gt;1linelayouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://csslayout.io/"&gt;csslayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would very much like your feedback.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What has been your experience with micro-frontends?&lt;/li&gt;
&lt;li&gt;Do you think "the layout team" would work?&lt;/li&gt;
&lt;li&gt;What do you think of this proposal?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading&lt;/p&gt;
&lt;h3&gt;Update 2022&lt;/h3&gt;
&lt;p&gt;Seems like there are already some good tools designed for monorepos architecture,
where you can use micro-frontends safely.&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://turborepo.org/"&gt;turborepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nx.dev/"&gt;nx.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid>https://woile.dev/es/posts/the-layout-team/</guid><pubDate>Mon, 08 Nov 2021 07:05:42 GMT</pubDate></item><item><title>Domain driven design at Europython 2021</title><link>https://woile.dev/es/posts/domain-driven-design-at-europython-2021/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Today I participated of the training &lt;a href="https://ep2021.europython.eu/talks/Bvzn5TH-transcend-the-realms-of-development-a-day-in-life-of-a-software-architect/"&gt;transcend the realms of development&lt;/a&gt;
at europython 2021, and I'm quite happy with the result.
Sometimes I'm hesitant of workshops because I don't
manage to extract value, but I really did from this one, and the hosts were great.
I've been questioning myself on how to make better representations of software,
specially among multiple developers and stakeholders, how to share a common language?&lt;/p&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Let's start by my final conclusions:&lt;/p&gt;
&lt;p&gt;My models on how to design software collaboratively are outdated; mostly UML and random diagrams, no clear design process.
There are new techniques used nowadays, so I will asses them and try to integrate
into my tool-belt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Asses &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;. I would like to be trained into this technique.&lt;/li&gt;
&lt;li&gt;Asses &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt; and &lt;a href="https://github.com/plantuml-stdlib/C4-PlantUML"&gt;diagrams as code&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;For KPN, I already added diagrams as code and C4 support in &lt;a href="https://kpn.github.io/mkdocs-kpn-theme/md-extensions/#plantuml-diagrams"&gt;mkdocs-kpn-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Next, you can find my notes, they may not be complete, I tried adding
some images to make them more understandable.&lt;/p&gt;
&lt;h3&gt;Domain driven design&lt;/h3&gt;
&lt;p&gt;Normally architecture grows organically, but it can have unexpected consequences.&lt;/p&gt;
&lt;p&gt;Domain driven design helps with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify domains -&amp;gt; core domains and secondary domains&lt;/li&gt;
&lt;li&gt;Quick feedback -&amp;gt; same language between stakeholders and developers&lt;/li&gt;
&lt;li&gt;Loosely coupled domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Phases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ritual dissent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eventstorming.com/"&gt;Event storming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defining domains&lt;/li&gt;
&lt;li&gt;Building future of our project using &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ritual dissent&lt;/h3&gt;
&lt;p&gt;Small groups iterating over features, then one person from each group
makes a pitch of 1 min to one of the other groups and gathers feedback.&lt;/p&gt;
&lt;p&gt;It goes like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teammate goes to other group and pitches&lt;/li&gt;
&lt;li&gt;Once done, the pitcher just listens to the feedback and takes notes, doesn't need
  to answer anything&lt;/li&gt;
&lt;li&gt;Goes back to the team and keeps refining&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The owner of a problem often has fixed ideas about both the problem and possible solutions. Ritual dissent, developed by Dave Snowden of Cognitive Edge, allows a group of people to discuss a problem whilst its âownerâ turns around and listens to the discussion without intervening.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Event storming&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;EventStorming is a flexible workshop format for collaborative exploration of complex business domains.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was quite pleased of the way it went with &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;,
because it's simple, easy to pick up technique, while being quite expressive.&lt;/p&gt;
&lt;p&gt;At the end of the day, event storming should help find bounded contexts.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://github.com/ddd-crew/eventstorming-glossary-cheat-sheet"&gt;event storming glossary cheat sheet&lt;/a&gt; for more documentation.&lt;/p&gt;
&lt;h3&gt;Defining domains&lt;/h3&gt;
&lt;p&gt;Once you are done with the event storm, you can start identifying your domains, take a look
at the next digram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="event storming context" src="https://woile.dev/images/domain-driven-design-at-europython-2021/event-storming-context.png"&gt;&lt;/p&gt;
&lt;p&gt;Taken from a &lt;a href="https://miro.com/miroverse/event-storming/"&gt;miro board over event storming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are the usual steps to finding the domains:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collect Domain Events - discover them&lt;/li&gt;
&lt;li&gt;Refine Domain Events - placing them in sequence&lt;/li&gt;
&lt;li&gt;Track causes - modelling out the broader ecosystem&lt;/li&gt;
&lt;li&gt;Re-sorting &amp;amp; result - categorize the events and build Bounded Contexts&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Messages between systems&lt;/h3&gt;
&lt;p&gt;We didn't get to this step.&lt;/p&gt;
&lt;h3&gt;Building the future of a project&lt;/h3&gt;
&lt;p&gt;We didn't get to this step, either, but it's about using C4 diagrams.
There was also a recommendation to use diagrams as a code, like plantUML, which
has support for C4 diagrams.&lt;/p&gt;
&lt;p&gt;In theory, C4 are zoom-in diagrams, with a very small surface of components to be learnt, different
to other approaches like UML, which have a massive scope.&lt;/p&gt;
&lt;p&gt;C4 has 4 levels of abstraction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;System Context diagram&lt;/strong&gt;: allows you to step back and see the big picture
   &lt;img src="https://c4model.com/img/bigbankplc-SystemContext.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container diagram&lt;/strong&gt;: shows the high-level shape of the software architecture and how responsibilities are distributed across it. It also shows the major technology choices and how the containers communicate with one another.
   &lt;img src="https://c4model.com/img/bigbankplc-Containers.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component diagram&lt;/strong&gt;: decomposes each container further to identify the major structural building blocks and their interactions.
   shows how a container is made up of a number of "components", what each of those components are, their responsibilities and the technology/implementation details.
   &lt;img src="https://c4model.com/img/bigbankplc-Components.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;Code: it is usually recommended to generate this automatically from the code, or do
   it only when really necessary.&lt;/li&gt;
&lt;/ol&gt;</description><guid>https://woile.dev/es/posts/domain-driven-design-at-europython-2021/</guid><pubDate>Mon, 26 Jul 2021 17:44:24 GMT</pubDate></item><item><title>FIRE para Argentinos en los PaÃ­ses Bajos</title><link>https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Hola!&lt;/p&gt;
&lt;p&gt;Mi idea con este post es compartir un poco la informaciÃ³n que he recolectado y tirarte
la informaciÃ³n necesaria para arrancar sin tener que pensar mucho.&lt;/p&gt;
&lt;p&gt;El tema inversiones es algo que &lt;strong&gt;no me atrae&lt;/strong&gt;, asÃ­ que estoy tratando de resolverlo
efectivamente, para no tener que pensar en eso en el futuro.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ATENCIÃN&lt;/p&gt;
&lt;p&gt;No me dedico a esto, y tampoco me gusta, asÃ­ que no te puedo dar ninguna garantÃ­a
de nada. Tomalo como una introducciÃ³n al tema.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cualquier duda, aporte o correcciÃ³n son bienvenidos, hay una secciÃ³n de comentarios al
final o podes contactarme en &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;IntroducciÃ³n&lt;/h3&gt;
&lt;p&gt;"Financial Independence, Retire Early" es un movimiento cuyo objetivo es acumular
bienes, hasta poder vivir de los ingresos pasivos (&lt;em&gt;passive income&lt;/em&gt;) que estos generan
e ir vendiendo los bines despacio.
La idea es maximizar los ahorros, reducir los gastos y encontrar distintas formas de
aumentar los ingresos.&lt;/p&gt;
&lt;p&gt;Se teoriza que cuanto mÃ¡s ahorres de tu salario, mÃ¡s rÃ¡pido te vas a poder retirar.&lt;/p&gt;
&lt;p&gt;Esto &lt;strong&gt;no se trata de hacerse rico al instante&lt;/strong&gt;, sino retirarse temprano, es decir,
en menos tiempo de lo que se llega a una pensiÃ³n.&lt;/p&gt;
&lt;p&gt;Tampoco se trata de tener una tonelada de plata, sino que tus bienes produzcan mÃ¡s o menos
los gastos que generÃ¡s ahora.&lt;/p&gt;
&lt;p&gt;Por tirar un nÃºmero, yo dirÃ­a que se tarda en promedio, 20 aÃ±os; esto es mucho menos que
la pensiÃ³n. Esto varÃ­a dependiendo de tu situaciÃ³n.&lt;/p&gt;
&lt;p&gt;Mas allÃ¡ de eso, es un gran complemento a lo que serÃ¡ tu pensiÃ³n y es &lt;strong&gt;mejor que
tener tu dinero parado&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Podes leer mÃ¡s en el &lt;a href="https://www.reddit.com/r/financialindependence/wiki/faq"&gt;faq de /r/financialindependance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Asegurate de &lt;strong&gt;no tener deudas&lt;/strong&gt; y tener un colchoncito de dinero, por lo menos
para &lt;strong&gt;poder vivir por 6 meses&lt;/strong&gt;, antes de empezar.&lt;/p&gt;
&lt;h3&gt;Inversiones&lt;/h3&gt;
&lt;p&gt;Yo me voy a enfocar en &lt;strong&gt;dÃ³nde invertir&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En general, los argentinos en los PaÃ­ses Bajos tienen un salario que les permite
ahorrar. Pero dada nuestra historia, (o por lo menos yo) no sabemos quÃ© se puede
hacer con los ahorros, ademÃ¡s de tenerlos en la cuenta.&lt;/p&gt;
&lt;p&gt;Entonces... dÃ³nde hay que invertir? En el stock market. SÃ­, &lt;strong&gt;acciones&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El stock market tiene el margen de retorno mÃ¡s alto (~7.5% cuenta la leyenda),
mejor que real estate, y otros &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;[0]&lt;/a&gt;, y el riesgo lo controlamos
invirtiendo de la forma controlada, y a largo plazo que se explica en este post.
El canadiense Ben Felix explica, por ejemplo, el costo asociado a comprar un hogar en &lt;a href="https://youtu.be/Uwl3-jBNEd4"&gt;este video&lt;/a&gt;. Y en el libro &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to wealth&lt;/a&gt; se
expande mucho sobre el tema de index funds, muy &lt;strong&gt;recomendado&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stock market" src="https://woile.dev/images/fire-para-argentinos-en-los-paises-bajos/stock.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pero no vamos a invertir de la manera que uno piensa en acciones, teniendo que mirar todos los dÃ­as la pantallita del celular, &lt;strong&gt;eso no por favor!&lt;/strong&gt; Ya veremos mÃ¡s adelante.&lt;/p&gt;
&lt;h4&gt;CuÃ¡nto necesito para retirarme&lt;/h4&gt;
&lt;p&gt;El cÃ¡lculo es &lt;strong&gt;25 veces tus gastos anuales&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Trinity_study"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilizo â¬40k anuales para vivir. Entonces â¬40k * 25 = â¬1M&lt;/li&gt;
&lt;li&gt;Tengo â¬1M en ahorros. Entonces puedo gastar â¬40k anuales (4%).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ese &lt;strong&gt;4%&lt;/strong&gt; aparece en muchos lugares mencionado.&lt;/p&gt;
&lt;p&gt;Pueden leer "&lt;a href="https://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;The Shockingly Simple Math Behind Early Retirement&lt;/a&gt;" para mÃ¡s info.&lt;/p&gt;
&lt;h4&gt;DÃ³nde invierto&lt;/h4&gt;
&lt;p&gt;BÃ¡sicamente invertiremos en ETFs o &lt;em&gt;index funds&lt;/em&gt;, que son mÃ¡s o menos lo mismo, a largo
plazo no importa mucho la diferencia.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;index funds&lt;/em&gt; son un conjunto de acciones de muchas empresas.&lt;/p&gt;
&lt;p&gt;Por los '70s, un tal &lt;a href="https://en.wikipedia.org/wiki/John_C._Bogle"&gt;John C. Bogle&lt;/a&gt; dijo que habÃ­a que armar un index que
imitara la performance del mercado en general a largo plazo.
Si el mercado en un perÃ­odo largo de tiempo genera 10% de interÃ©s, eso es a lo que apuntamos.
Dijo que el &lt;strong&gt;mercado siempre estÃ¡ creciendo&lt;/strong&gt;.
FundÃ³ entonces &lt;a href="https://investor.vanguard.com/corporate-portal/"&gt;The Vanguard Group&lt;/a&gt;, en la que
los dueÃ±os son los mismos clientes, es decir, si tenÃ©s acciones del index sos en parte dueÃ±o.&lt;/p&gt;
&lt;p&gt;Bogle estaba en contra de la especulaciÃ³n, que es cortoplacista y se enfoca en
el precio de las acciones. En cambio, a largo plazo obtenemos una ganancia en base
al negocio en sÃ­ mismo, y la gente que lo saca adelante.&lt;/p&gt;
&lt;p&gt;CÃ³mo imitÃ³ al mercado? Seleccionando un conjunto de muchas empresas.
Blog entonces lanzÃ³ su primer index fund atado al &lt;a href="https://en.wikipedia.org/wiki/S%26P_500_Index"&gt;S&amp;amp;P500&lt;/a&gt;, que son las mejores 500 empresas
americanas.&lt;/p&gt;
&lt;p&gt;El resto es historia.&lt;/p&gt;
&lt;p&gt;Hoy en dÃ­a hay muchÃ­simos tipos de fondos. A mi me gustan los &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Environmental,_social_and_corporate_governance"&gt;ESG&lt;/a&gt;&lt;/strong&gt; que son &lt;strong&gt;fondos
sustentables&lt;/strong&gt;. Es interesante que el mismo dinero que nos va a dar de comer puede tener
un impacto (positivo o negativo) en el mundo.&lt;/p&gt;
&lt;h4&gt;CÃ³mo invertir&lt;/h4&gt;
&lt;p&gt;Estando en los PaÃ­ses Bajos es muy fÃ¡cil, puede ser a travÃ©s de la app del banco,
o usando &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;Trading 212&lt;/a&gt; (T212). DeGiro no la recomiendo, porque me pedÃ­a un nÃºmero
fiscal que no tengo y no pude activar mi cuenta.&lt;/p&gt;
&lt;p&gt;En T212 te van a pedir una &lt;em&gt;proof of address&lt;/em&gt;, que puede ser la boleta del agua.&lt;/p&gt;
&lt;p&gt;En teorÃ­a, ellos te abren una cuenta que es tuya, y no la pueden tocar, esto
estÃ¡ protegido por leyes de la UniÃ³n Europea. A mi igual me cuesta confiar en esas apps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Si te vas a abrir una cuenta en T212, usa &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;mi link de referencia&lt;/a&gt; que
nos dan una acciÃ³n de hasta â¬100 a cada uno.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dependiendo la plataforma que elijas, vas a tener un abanico de ofertas diferentes,
y sus costos varÃ­an. Pero el tema de costos es despreciable, asÃ­ que no importa mucho.&lt;/p&gt;
&lt;p&gt;A continuaciÃ³n, dejo una lista que la podes usar asÃ­ como estÃ¡, dependiendo de tu
plataforma:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plataforma&lt;/th&gt;
&lt;th&gt;Index Fund&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T212&lt;/td&gt;
&lt;td&gt;100% VWRL FTSE All-World Index (IE00B3RBWM25)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ING Zelf op de beurs&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ABN Amro Zelf Beleggen Basis&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rabobank Zelf Beleggen&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;La plataforma que elijas, la buscÃ¡s en Google, y te va a llevar a dÃ³nde hacer click
para configurar o crear una cuenta.&lt;/p&gt;
&lt;p&gt;HabrÃ¡s notado que para los bancos es el mismo fund the &lt;a href="https://www.northerntrust.com/netherlands/home"&gt;Northern Trust&lt;/a&gt; (NT), esto
es asÃ­, porque estÃ¡n registrados en los PaÃ­ses Bajos, y no se quÃ© mambo hay que
terminamos pagando menos impuestos. (Actualizado &lt;a href="https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/#2021-03-22"&gt;2021-03-22&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;AdemÃ¡s son &lt;strong&gt;ESG&lt;/strong&gt;, que significa "Environmental, social and corporate governance" y eso es genial.&lt;/p&gt;
&lt;p&gt;T212 no tiene disponibles los fondos de NT, pero los de Vanguard son los mÃ¡s recomendados
en la mayor parte del mundo y son buenos. No sÃ© si tienen &lt;strong&gt;ESG&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El porcentaje que aparece es cuÃ¡nto hay que invertir en cada uno.
Si vas a poner â¬100, entonces â¬88 van para World Custom y â¬12 para Emerging Market.&lt;/p&gt;
&lt;p&gt;Todos los meses separÃ¡ una parte de tu salario, y volvÃ©s a comprar en el mismo fund.&lt;/p&gt;
&lt;p&gt;Para ver costos, cuÃ¡nto obtendremos de retorno, y mÃ¡s informaciÃ³n, un holandÃ©s hizo la web &lt;a href="https://www.indexfondsenvergelijken.nl/"&gt;indexfondsenvergelijken.nl&lt;/a&gt;, que es genial.&lt;/p&gt;
&lt;h3&gt;Impuestos&lt;/h3&gt;
&lt;p&gt;Vas a tener que pagar impuestos por todos tus bienes en Holanda, de eso olvidate
y mejor no luchar en contra.&lt;/p&gt;
&lt;p&gt;Tus &lt;em&gt;assets&lt;/em&gt; los vas a tener que reportar. EstÃ©s usando el banco o una plataforma,
todos los aÃ±os, en diciembre, te van a mandar un reporte con el valor de tus inversiones hasta ese momento.
Ese valor es el que vas a tener que ingresar en la declaraciÃ³n jurada de ese aÃ±o, en la parte de &lt;em&gt;wealth tax (box 3)&lt;/em&gt;.
Capaz te dan algÃºn beneficio por comprar los NT por ejemplo, pero todavÃ­a no sÃ© bien cÃ³mo funciona,
por el momento, solo se que hay algÃºn tipo de beneficio&lt;/p&gt;
&lt;p&gt;Los primeros â¬30k si sos soltero o â¬60k para parejas, son libres de impuesto. Te
van a cobrar impuestos solamente sobre el monto que supere ese limite.&lt;/p&gt;
&lt;p&gt;Si vos tenes â¬75k, te van a cobrar impuestos sobre â¬15k solamente.&lt;/p&gt;
&lt;p&gt;Esta es la tablita del 2019&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Braket&lt;/th&gt;
&lt;th&gt;Impuesto&lt;/th&gt;
&lt;th&gt;Ejemplo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;â¬0-â¬71.650&lt;/td&gt;
&lt;td&gt;0.58%&lt;/td&gt;
&lt;td&gt;â¬50.000 -&amp;gt; â¬290&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;â¬71.651-989.736&lt;/td&gt;
&lt;td&gt;1.34%&lt;/td&gt;
&lt;td&gt;â¬300.000 -&amp;gt; â¬4.020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt; â¬989.737&lt;/td&gt;
&lt;td&gt;1.68%&lt;/td&gt;
&lt;td&gt;â¬1.100.000 -&amp;gt; â¬18.480&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Obtener el dinero de las inversiones&lt;/h3&gt;
&lt;p&gt;Los fondos de inversiÃ³n, bonos, stock, y otros, suelen producir &lt;a href="https://en.wikipedia.org/wiki/Dividend"&gt;dividendos&lt;/a&gt;,
que es la distribuciÃ³n de ganancias hacia los shareholders.&lt;/p&gt;
&lt;p&gt;Como vos vas a ser uno, te va a llegar esa plata; en general te la depositan en
la plataforma que uses.&lt;/p&gt;
&lt;p&gt;La idea es que una vez que llegÃ¡s a tu objetivo, vivas de los dividendos, pero a
veces tambiÃ©n vas a tener que vender una partecita.&lt;/p&gt;
&lt;p&gt;Digamos que tenÃ©s que sacar 4% de tu portfolio por aÃ±o. Si los dividendos te dan
2.5%, vas a tener q vender un 1.5%. Pero no importa, porque ese 1.5% lo
recuperarÃ­as ese mismo aÃ±o en teorÃ­a.&lt;/p&gt;
&lt;p&gt;En los PaÃ­ses Bajos, los fondos de inversiÃ³n, estÃ¡n obligados a pagarte los dividendos
al menos una vez por aÃ±o, durante los primeros 8 meses del aÃ±o.&lt;/p&gt;
&lt;p&gt;Northern Trust fund, por ejemplo, los suele pagar en febrero.&lt;/p&gt;
&lt;h3&gt;No vivÃ­s en Holanda&lt;/h3&gt;
&lt;p&gt;Si estas en USA lee el libro &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to Wealth&lt;/a&gt; que te va a guiar.&lt;/p&gt;
&lt;p&gt;Si estas en otro paÃ­s de Europa podes pedir consejo en &lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pero el principio es el mismo.&lt;/p&gt;
&lt;h3&gt;Resumen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abrite una cuenta de inversiones en tu banco o app favorita.&lt;/li&gt;
&lt;li&gt;InvertÃ­ en &lt;em&gt;Index Funds&lt;/em&gt; (Northern Trust o Vanguard).&lt;/li&gt;
&lt;li&gt;Hacelo un hÃ¡bito y olvidate del tema, no importa si el mercado cae, &lt;strong&gt;NO VENDAS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research pendiente&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;30% ruling no necesita declarar ahorros e inversiones? &lt;a href="https://www.xpat.nl/expat-netherlands/legal-financial-netherlands/dutch-taxes/#main:~:text=Box%203%3A%20Taxable%20Income%20from%20Savings%20and%20Investments"&gt;Pareciera que no&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Invertir en stocks "green" aumenta nuestro mÃ¡ximo a â¬50k?&lt;/li&gt;
&lt;li&gt;CÃ³mo se hace el rebalance anual?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Actualizaciones&lt;/h3&gt;
&lt;h4&gt;2021-03-22 &lt;a name="2021-03-22"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Un amigo me confirmÃ³ que si tenes el 30% ruling no pagas impuestos en el BOX 3 por inversiones o savings, luego de
hablar con el ABN.&lt;/li&gt;
&lt;li&gt;Es posible dejar la cuenta abierta del banco si te vas a vivir a otro paÃ­s, es decir que las inversiones
las podes seguir manejando por ahÃ­.&lt;/li&gt;
&lt;li&gt;Beneficio de tener index fund registrado en los PaÃ­ses Bajos:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Northern Trust indexfunds are domiciled in the Netherlands and thus avoid dividend leakage which increases their returns about 0,25% per year as compared with a similar indexfund or ETF domiciled in Ireland or Luxembourg (as most in Europe are). Dividend leakage means you'd pay capital gains taxes twice on the same gains. A 0,25% difference isn't the end of the world if you take into account you do pay service fees at ABN AMRO and Rabobank while for a similar ETF at DeGiro you wouldn't pay a service fee.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Recursos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE/comments/flc6d1/all_world_index_portfolios_en_broker_kosten_2020/"&gt;AnÃ¡lisis de los Index Fund y costos 2020 (holandes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE"&gt;r/DutchFIRE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@nick604?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Nick Chong&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hola ð&lt;/p&gt;
&lt;p&gt;Si te interesa lo que escribo podes seguirme en &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>argentinos</category><category>dinero</category><category>fire</category><category>holanda</category><category>inversion</category><guid>https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/</guid><pubDate>Mon, 03 Aug 2020 16:08:26 GMT</pubDate></item><item><title>Automating semver releases with commitizen</title><link>https://woile.dev/es/posts/automating-semver-releases-with-commitizen/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;&lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; is a great way to version an application.
Languages like rust have &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-cratesio"&gt;fully embraced it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SemVer version looks like this: &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quite simple, right?&lt;/p&gt;
&lt;p&gt;We can map that to &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; where&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAJOR&lt;/code&gt; â¡ï¸ BREAKING CHANGES â ï¸&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt; â¡ï¸ New stuff ð&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; â¡ï¸ Security ð and bug fixes ð&lt;/p&gt;
&lt;p&gt;That's the highlight.&lt;/p&gt;
&lt;h3&gt;Making a new release&lt;/h3&gt;
&lt;p&gt;Usually, when making a new semantic version (semver), you have to review your
commits, check if there's any braking changes, then check if there are new features,
otherwise, it's just a patch. This process can be tedious, but semver gives
developers a lot of information about a release, like if they can update safely,
new features, or they &lt;strong&gt;must&lt;/strong&gt; update.&lt;/p&gt;
&lt;p&gt;The release process can be fully automated, but it has a price.&lt;/p&gt;
&lt;h3&gt;The Price&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automating release&lt;/h3&gt;
&lt;p&gt;By writing commits this way, we have to think, in that moment, what kind of change
we are introducing. And that information get's encoded in the message.&lt;/p&gt;
&lt;p&gt;Let's see a simple rule for parseable, easy to map messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Include MAJOR:, MINOR:, PATCH: at the beginning of each commit. If not present
the commit will be skipped, and it won't be released.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commits examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAJOR: Change public interface for class User&lt;/p&gt;
&lt;p&gt;MINOR: Add new type of user (employee)&lt;/p&gt;
&lt;p&gt;PATCH: Fix full name not being displayed properly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's it! The next step is to use a tool to collect the commits, and generate
the correct &lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Commit tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Talk imperative and follow this rule: &lt;code&gt;If applied, this commit will &amp;lt;commit message&amp;gt;&lt;/code&gt; &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keep the subject short&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introducing commitizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;Commitizen&lt;/a&gt; is a tool to do exactly that.&lt;/p&gt;
&lt;p&gt;I created it in order to automate that process. Based on existing tools from
the JS ecosystem but which I found hard to use.&lt;/p&gt;
&lt;p&gt;By default it parses the widely popular commit rules: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But you can &lt;a href="https://commitizen-tools.github.io/commitizen/customization/#2-customize-through-customizing-a-class"&gt;easily extend commitizen&lt;/a&gt; to create the example given before.&lt;/p&gt;
&lt;p&gt;Not only it will create the version, but it can also generate the changelog.&lt;/p&gt;
&lt;p&gt;It's really easy to use, first create a &lt;code&gt;.cz.toml&lt;/code&gt; file in your project's root.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"2.5.1"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;version_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"setup.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Dockerfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"src/__version__.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scripts/publish"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And that's it, by running a single command we get the version and the changelog.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;veresion_files&lt;/code&gt; will also bump the version in the specified files.&lt;/p&gt;
&lt;h3&gt;CI/CD&lt;/h3&gt;
&lt;p&gt;&lt;img alt="diagram of semantic release" src="https://woile.dev/images/automating-deployment-with-commitizen/semantic_release.png"&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, you'd execute commitizen during the "merge job" (green in the diagram), where "bump version" is highlighted.&lt;/p&gt;
&lt;p&gt;For example, if you are using Github Actions, you'd add this to your job:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Commitizen then, will generate a new commit, with the updated version in the files and the changelog; and a new tag.&lt;/p&gt;
&lt;p&gt;Both are pushed back.&lt;/p&gt;
&lt;p&gt;For the new commit, we should not trigger again the CI.&lt;/p&gt;
&lt;p&gt;The new tag, instead, should trigger another job, "tag job" (purple in the diagram), which will take care of the release, which can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deploying to kubernetes&lt;/li&gt;
&lt;li&gt;publishing to pypi/npm/cargo&lt;/li&gt;
&lt;li&gt;deploying to a cloud service, like AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;Recap&lt;/h3&gt;
&lt;h4&gt;Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Price&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Command&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;cz bump --changelog
&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Try commitizen and check the &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We aim for simplicity, trying to make this process as simple as possible, but
the tool is quite flexible, explore it, and see if it fits for your use cases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello ð&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/automating-semver-releases-with-commitizen/</guid><pubDate>Wed, 15 Jul 2020 15:27:20 GMT</pubDate></item><item><title>Helm 3 - Crafting a Chart</title><link>https://woile.dev/es/posts/helm-3-crafting-a-chart/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;This post focuses on &lt;strong&gt;creating and releasing a chart&lt;/strong&gt;, not consuming from a Helm Chart Repository.&lt;/p&gt;
&lt;p&gt;Helm is an &lt;strong&gt;advanced&lt;/strong&gt; tool used by kubernetes people, some "lingo" (jargon) is used here.
Please leave a comment if you want more information.&lt;/p&gt;
&lt;p&gt;Helm allows to &lt;strong&gt;"package"&lt;/strong&gt; kubernetes applications, it simplifies the distribution
and installation. While doing so, it checks dependencies versions and some other validations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://helm.sh/docs/intro/"&gt;Official Helm 3 Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Version used&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;$ helm version --short
v3.2.4+g0ad800e
&lt;/pre&gt;
&lt;h3&gt;Helm Chart&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A Chart is a Helm package. It contains all of the resource definitions necessary to run an application,
tool, or service inside of a Kubernetes cluster. Think of it as the Kubernetes equivalent of a
Homebrew formula, an apt dpkg, or a Yum RPM file &lt;a href="https://helm.sh/docs/intro/using_helm/#three-big-concepts"&gt;[0]&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For OOP people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chart ~= class&lt;/li&gt;
&lt;li&gt;Release ~= instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is important to remember, we are going to be building a &lt;strong&gt;package&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Development of a Chart&lt;/h3&gt;
&lt;h4&gt;Creating a new Chart&lt;/h4&gt;
&lt;p&gt;My recommendation is to create a &lt;code&gt;charts/&lt;/code&gt; folder in the root of your project(s).&lt;/p&gt;
&lt;p&gt;This way each of your projects could become a "chart repository", similar to how hub.helm.sh consumes respositories from different sources in a descentralized way.&lt;/p&gt;
&lt;p&gt;You could do the same for your projects. Each git project becomes a descentralized chart repository,
or you can publish to a centralized chart repository like artifactory or your own github repo.&lt;/p&gt;
&lt;p&gt;In any case, calling it &lt;code&gt;charts/&lt;/code&gt; is informative and flexible enough to choose any option.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;charts/&lt;/code&gt;, we are going to use &lt;code&gt;helm&lt;/code&gt; to create the first boilerplate of our app.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm create &amp;lt;package_name&amp;gt;
&lt;/pre&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;p&gt;Along the post we'll use &lt;code&gt;auth-service&lt;/code&gt; as our project example name.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;mkdir auth-service
&lt;span class="nb"&gt;cd&lt;/span&gt; auth-service/
mkdir charts
&lt;span class="nb"&gt;cd&lt;/span&gt; charts/
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;helm create auth-service
&lt;/pre&gt;
&lt;h5&gt;Structure&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;auth-service/
âââ charts/
    âââ auth-service/
        âââ charts/
        âââ Chart.yaml
        âââ templates/
        âÂ Â  âââ deployment.yaml
        âÂ Â  âââ _helpers.tpl
        âÂ Â  âââ hpa.yaml
        âÂ Â  âââ ingress.yaml
        âÂ Â  âââ NOTES.txt
        âÂ Â  âââ serviceaccount.yaml
        âÂ Â  âââ service.yaml
        âÂ Â  âââ tests/
        âÂ Â      âââ test-connection.yaml
        âââ values.yaml
&lt;/pre&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appVersion&lt;/code&gt; inside &lt;code&gt;Chart.yaml&lt;/code&gt; references the &lt;strong&gt;application version&lt;/strong&gt; &lt;a href="https://stackoverflow.com/a/60054111/2047185"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image.tag&lt;/code&gt; inside &lt;code&gt;values.yaml&lt;/code&gt; references the &lt;strong&gt;docker image version/tag&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;image.tag&lt;/code&gt; is skipped, &lt;code&gt;appVersion&lt;/code&gt; is used instead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;recommendation&lt;/strong&gt;: use a tool to automatically bump the version, like &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt;,
during the CI execution, and push back to the repo.&lt;/li&gt;
&lt;li&gt;Whether to use &lt;code&gt;image.tag&lt;/code&gt; or &lt;code&gt;appVersion&lt;/code&gt; is still under debate, you can read more in the
&lt;a href="https://github.com/helm/helm/issues/8194"&gt;github issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;appVersion&lt;/code&gt; you can use &lt;code&gt;helm history &amp;lt;release_name&amp;gt;&lt;/code&gt; to get info on the versions
per revision.&lt;/li&gt;
&lt;li&gt;You can re-use the same chart to deploy multiple django/rails applications, &lt;a href="https://github.com/helm/helm/issues/8194#issuecomment-658715462"&gt;seems like a
common practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chart customization&lt;/h4&gt;
&lt;p&gt;I recommend to start with the default helm chart and from there, start
adding any extra stuff that you need.&lt;/p&gt;
&lt;h4&gt;Templating&lt;/h4&gt;
&lt;p&gt;If you have used other template systems like &lt;code&gt;jinja&lt;/code&gt;, or Django's template engine,
Helm's system is not that different: you can apply functions using a pipeline &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;.Values.favorite.food | upper | quote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Avoid adding complex template tags; the purpose of &lt;code&gt;yaml&lt;/code&gt; is to be &lt;strong&gt;readable&lt;/strong&gt;.
By using templates, we make things more complex, and less readable, &lt;strong&gt;touch only when necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;templates/_helpers.tpl&lt;/code&gt; contains custom functions for your templates, like generating the release name based on values.&lt;/p&gt;
&lt;p&gt;To find problems with you charts, run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm lint &amp;lt;package_name&amp;gt;
&lt;/pre&gt;
&lt;h4&gt;Values&lt;/h4&gt;
&lt;p&gt;Place the "configuration" that you want to expose to the users of the chart in
the &lt;code&gt;values.yaml&lt;/code&gt;, even if it's you who's gonna end up using it.
There's no need to parametrize everything, and try to use sensible defaults.&lt;/p&gt;
&lt;p&gt;A good rule is to expose only the things you are going to use and make new
parameters only when you have to.&lt;/p&gt;
&lt;p&gt;Let developers specify unconventional aspects of the application.&lt;/p&gt;
&lt;p&gt;You can also define a &lt;code&gt;values.schema.json&lt;/code&gt; which will be used by helm to validate
the parameters given to Helm &lt;a href="https://helm.sh/docs/topics/charts/#schema-files"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Using custom values&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;values.yaml&lt;/code&gt; is used as default and any extra values provided through &lt;code&gt;--set&lt;/code&gt; or &lt;code&gt;--values&lt;/code&gt;
will be merged into the default &lt;code&gt;values.yaml&lt;/code&gt; inside the chart.&lt;/p&gt;
&lt;p&gt;There are 2 approaches to deal with custom values that I know.&lt;/p&gt;
&lt;h5&gt;Centralized values&lt;/h5&gt;
&lt;p&gt;The first one is to have a centralized place with all the configuration. At the
moment, I know &lt;a href="https://github.com/roboll/helmfile"&gt;helmfile&lt;/a&gt; is being used for this.
You'd specify every configuration per environment per chart in a &lt;code&gt;helmfile.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;Per repository&lt;/h5&gt;
&lt;p&gt;This is the most popular approach. Each "project" is responsible to set the values
per enviroment (&lt;code&gt;production&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you are going to modify small aspects of your app, using &lt;code&gt;--set&lt;/code&gt; should be enough.&lt;/p&gt;
&lt;p&gt;A common practice, is to place the production and staging files inside the chart folder,
but in my opinion this should be avoided when possible.&lt;/p&gt;
&lt;p&gt;A Helm chart is a package: &lt;strong&gt;Helm is a package manager&lt;/strong&gt;.
Like apt, pip or npm.
When we use tools like Docker, for example, we provide env variables from outside, they are
not packaged inside the image. This gives the container a lot of flexibility and the
same principle applies to Helm. There's an interesting &lt;a href="https://github.com/helm/helm/issues/6715"&gt;discussion in the helm repo&lt;/a&gt;
about this.&lt;/p&gt;
&lt;p&gt;Ideally, your custom values should live outside the chart, and they should be given to the chart.&lt;/p&gt;
&lt;p&gt;Let's see a setup example for the &lt;code&gt;auth-service&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;auth-service/
âââ charts/
âÂ Â  âââ auth-service/
âââ charts-values/
âÂ Â  âââ production/
â   â   âââ redis.yaml
âÂ Â  âÂ Â  âââ auth-service.yaml
âÂ Â  âââ staging/
âÂ Â      âââ auth-service.yaml
âââ src/
&lt;/pre&gt;
&lt;p&gt;The installation command would look like&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm install --values charts-values/production/auth-service.yaml auth-service-prod ./auth-service
&lt;/pre&gt;
&lt;p&gt;I'm not 100% happy with the above setup, mainly with the naming.
But it allows having multiple values per chart per environment.
We could easily add values for a redis pulled from the official Helm hub.
I'd like to hear opinions about it. How'd you do it?&lt;/p&gt;
&lt;h3&gt;Release&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A Release is an instance of a chart running in a Kubernetes cluster. One chart can often be installed many times into the same cluster. And each time it is installed, a &lt;strong&gt;new release is created&lt;/strong&gt;.
Consider a MySQL chart. If you want two databases running in your cluster, you can install that chart twice. Each one will have its own release, which will in turn have its own release name &lt;a href="https://helm.sh/docs/intro/using_helm/#three-big-concepts"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;New release&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;helm install &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Deploy a new release to the cluster.&lt;/p&gt;
&lt;p&gt;We can also run a dry-run to check what's going to happen:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm install &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt; --dry-run
&lt;/pre&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;helm install auth-service-prod ./auth-service
&lt;/pre&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package_name&lt;/code&gt; can be a folder, a &lt;code&gt;.tgz&lt;/code&gt; or a url.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release_name&lt;/code&gt;: the name of this particular release. If the name is different another "instance" will be deployed. So for redis instances it may be worth using different &lt;code&gt;release_name&lt;/code&gt;s, but for your JavaScript app it may not.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;templates/NOTES.txt&lt;/code&gt; is shown in the prompt when making a new release, useful for CI logs.&lt;/li&gt;
&lt;li&gt;If you don't want to provide a &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;, use &lt;code&gt;--generate-name&lt;/code&gt; and it will assign a random &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Helm stores release config per namespace, so if you want to release 2 redis instances in the same namespace, they should have different &lt;code&gt;&amp;lt;release_name&amp;gt;&lt;/code&gt;s &lt;a href="https://github.com/helm/community/blob/master/helm-v3/003-state.md#namespacing-changes"&gt;[4]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Helm does not wait until all of the resources are running before it exits &lt;a href="https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package"&gt;[5]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;personal&lt;/strong&gt;: use different &lt;code&gt;release_name&lt;/code&gt;s per environment (&lt;code&gt;production&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;). Even though it may not be necessary, giving that extra information in the name is useful and cheap.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;helm get values &amp;lt;release_name&amp;gt;&lt;/code&gt; to get the values used for the release, useful to check if our custom values were applied properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Check release status&lt;/h4&gt;
&lt;p&gt;After it is installed, we want to know if everything went well.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm status &amp;lt;release_name&amp;gt;
&lt;/pre&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;helm status auth-service-prod
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;An upgrade takes an existing release and upgrades it according to the information you provide. Because Kubernetes charts can be large and complex, Helm tries to perform the &lt;strong&gt;least invasive upgrade&lt;/strong&gt;. It will only update things that have changed &lt;strong&gt;since the last release&lt;/strong&gt;. &lt;a href="https://helm.sh/docs/intro/using_helm/#helm-upgrade-and-helm-rollback-upgrading-a-release-and-recovering-on-failure"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Uprgrade release&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;helm upgrade -f &amp;lt;custom_values.yaml&amp;gt; &amp;lt;release_name&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;helm upgrade -f charts-values/production/auth-service.yaml auth-service-prod ./auth-service
&lt;/pre&gt;
&lt;h4&gt;Rollback release&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;helm rollback &amp;lt;release_name&amp;gt; &amp;lt;revision&amp;gt;
&lt;/pre&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;helm rollback auth-service-prod &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Any release version increment will produce a &lt;code&gt;revision&lt;/code&gt; number. It goes from 1..N.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;helm history &amp;lt;release_name&amp;gt;&lt;/code&gt; to see the revisions of your &lt;code&gt;release_name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Uninstall release&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;helm uninstall &amp;lt;release_name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;I won't go deep into this, but just know it exists, and you can remove an existing release.&lt;/p&gt;
&lt;h4&gt;Automating release cycle&lt;/h4&gt;
&lt;p&gt;A recommended best practice to avoid running &lt;code&gt;helm install&lt;/code&gt; and &lt;code&gt;helm upgrade&lt;/code&gt; &lt;a href="https://helm.sh/docs/howto/charts_tips_and_tricks/#install-or-upgrade-a-release-with-one-command"&gt;[7]&lt;/a&gt; is to use:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;helm upgrade --install &amp;lt;release_name&amp;gt; --values &amp;lt;custom_values.yaml&amp;gt; &amp;lt;package_name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This can be a benefit in an automated CI/CD pipeline. We let Helm perform the check to know if it's a first time,
or a release upgrade.&lt;/p&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;helm upgrade --install auth-service-prod --values charts-values/production/auth-service.yaml ./auth-service
&lt;/pre&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;--atomic&lt;/code&gt; to get automatic rollback on failures.&lt;a href="https://lzone.de/blog/Helm-Best-Practices"&gt;[8]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Complex Charts with Many Dependencies&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The current best practice for composing a complex application from discrete parts is to create a top-level umbrella chart that exposes the global configurations, and then use the charts/ subdirectory to embed each of the components.&lt;a href="https://helm.sh/docs/howto/charts_tips_and_tricks/#complex-charts-with-many-dependencies"&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is an improving point; I haven't understood it by reading the documentation yet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello ð&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/helm-3-crafting-a-chart/</guid><pubDate>Wed, 15 Jul 2020 13:20:41 GMT</pubDate></item><item><title>Pyenv</title><link>https://woile.dev/es/posts/pyenv/</link><dc:creator>Woile</dc:creator><description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; is a shell script to manage python versions.
Works in the user space, avoiding the system's python, therefore is less error prone.
You can also control a per directory version (this creates a &lt;code&gt;.python-version&lt;/code&gt;).
Doesn't require python.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://github.com/pyenv/pyenv-installer"&gt;pyenv-installer&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;curl https://pyenv.run &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt;  &lt;span class="c1"&gt;# Restart shell or open new terminal&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;Install different python versions&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.6.10
pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.7.6
&lt;/pre&gt;
&lt;h4&gt;Set global python&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.7.6
&lt;/pre&gt;
&lt;p&gt;Observe&lt;/p&gt;
&lt;pre class="code literal-block"&gt;python --version
&lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;/pre&gt;
&lt;h4&gt;Set local python&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/my-project
pyenv &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.6.10
&lt;/pre&gt;
&lt;p&gt;Observe&lt;/p&gt;
&lt;pre class="code literal-block"&gt;cat .python-version
python --version
&lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;/pre&gt;
&lt;h4&gt;Other languages&lt;/h4&gt;
&lt;p&gt;There's a set of similar tools for other languages, following the
same convention here, so if you know &lt;code&gt;pyenv&lt;/code&gt;, you know &lt;code&gt;nodenv&lt;/code&gt; for example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ruby:&lt;/strong&gt; &lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;javascript:&lt;/strong&gt; &lt;a href="https://github.com/nodenv/nodenv"&gt;nodenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;go:&lt;/strong&gt; &lt;a href="https://github.com/syndbg/goenv"&gt;goenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;php:&lt;/strong&gt; &lt;a href="https://github.com/phpenv/phpenv"&gt;phpenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/intro-to-pyenv/"&gt;In depth tutorial by real python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;Official docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello ð&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/pyenv/</guid><pubDate>Wed, 08 Jul 2020 09:07:26 GMT</pubDate></item><item><title>2019 yearly retrospective</title><link>https://woile.dev/es/posts/2019-yearly-retrospective/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;So far it's been great. I just wanted to write a recap for my future self.&lt;/p&gt;
&lt;h3&gt;Life&lt;/h3&gt;
&lt;p&gt;This year will be almost 3 years since I've been in Amsterdam. I love living here.
The more I think about it the more I'm sure of it: &lt;strong&gt;Amsterdam (or the whole Netherlands) is a bubble&lt;/strong&gt;,
even in Europe.
Most people move around in their bikes, everything just works, everyone enjoys living here,
there's a huge balance between nature and city.
It's a cosmopolitan city, full of diversity, alive, but it looks like a small town.&lt;/p&gt;
&lt;p&gt;Of course it's not perfect and it has its issues, but nothing can be perfect.&lt;/p&gt;
&lt;h3&gt;Friends&lt;/h3&gt;
&lt;p&gt;This year I've made a lot of friends, most of them Argentinians.
It's always nice to experience life with friends. I'm thankful for it.&lt;/p&gt;
&lt;p&gt;I'm lucky enough to have many friends in many different places, with different ideas,
desires, experiences. They enrich my mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: keep making friends; most people are interesting&lt;/p&gt;
&lt;h3&gt;Books&lt;/h3&gt;
&lt;p&gt;This year I read 10 out of 12 books I wanted to read.
Pretty good, but next year I'll read more.
I feel that in this era of information overload, books are a way to get "curated" information.&lt;/p&gt;
&lt;h3&gt;Travel&lt;/h3&gt;
&lt;p&gt;Thanks to randomness and myself, I have the chance to travel quite often.
This year I've been to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alicante, Spain on my first climbing trip.&lt;/li&gt;
&lt;li&gt;Tignes, France on my first ski trip.&lt;/li&gt;
&lt;li&gt;Sharm El Sheikh, Egypt to dive.&lt;/li&gt;
&lt;li&gt;Istanbul, Turkey and its other cities for tourism.&lt;/li&gt;
&lt;li&gt;London, UK to visit my sister.&lt;/li&gt;
&lt;li&gt;Basel, Switzerland attending to attend the Europython conference.&lt;/li&gt;
&lt;li&gt;Bordeaux, France to give a talk at PyCon France.&lt;/li&gt;
&lt;li&gt;Gent, Belgium for a festival.&lt;/li&gt;
&lt;li&gt;Giethoorn, The Netherlands with my mom.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've reduced the amount of flights I take, in order to reduce my environment impact.
And I also don't enjoy flying.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: traveling expands my mind&lt;/p&gt;
&lt;h3&gt;Hobby&lt;/h3&gt;
&lt;p&gt;This year I've released 2 apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rentee.app"&gt;rentee.app&lt;/a&gt; (may not work now due to certificates)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veck.app"&gt;veck.app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one took around 2 years to be built and the second around 2 weeks.
Of course, the later was built after the lessons learned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson&lt;/strong&gt;: release early&lt;/p&gt;
&lt;p&gt;As of today I think that validating against your users is the best way to build services or products,
&lt;strong&gt;build a core&lt;/strong&gt; and go public. Make a short list of what must be done, and launch.&lt;/p&gt;
&lt;p&gt;I still have to learn how to communicate and reach wider audiences, but it's going well so far.&lt;/p&gt;
&lt;p&gt;I'm thankful for having a bunch of enthusistic friends to work with them in our
ideas and projects.&lt;/p&gt;
&lt;h3&gt;Languages&lt;/h3&gt;
&lt;p&gt;I've been trying to improve my Dutch for some time now.
This last time I've barely started to feel a bit comfortable with it.
My Duolingo streak is 363 days so far, and I don't plan on stopping.&lt;/p&gt;
&lt;p&gt;Regarding programming languages, this year I've talked in some conferences and meetups,
contributed to many open source projects and now I'm also trying to help people who want to learn
(if you want to, you can always write me for advice).&lt;/p&gt;
&lt;p&gt;Special mention to the &lt;strong&gt;Python programming language&lt;/strong&gt;, thanks to whom,
I can do a lot of things in my life :)&lt;/p&gt;
&lt;p&gt;Next year, I'll try to focus more on languages like rust, which attract me a lot.&lt;/p&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;p&gt;My current job so far is great, and I'm thankful for it.
I work from Monday to Thursday and on Fridays, they let me work on myself.
The schedule is flexible and no one in my team is counting hours;
they count the work done instead.
I won't go into detail because it's stuff I build for the company.&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;Things I plan to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a podcast about history.&lt;/li&gt;
&lt;li&gt;Build (paid) services that help people.&lt;/li&gt;
&lt;li&gt;Build useful apps for fun.&lt;/li&gt;
&lt;li&gt;Learn another programming language.&lt;/li&gt;
&lt;li&gt;Read more books.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and follow me on Twitter &lt;a href="https://twitter.com/santiwilly"&gt;santiwilly&lt;/a&gt; if you want to know more about my future.&lt;/p&gt;</description><guid>https://woile.dev/es/posts/2019-yearly-retrospective/</guid><pubDate>Tue, 31 Dec 2019 16:40:35 GMT</pubDate></item><item><title>Multiple configurations in kubernetes</title><link>https://woile.dev/es/posts/multiple-configurations-in-kubernetes/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;It may happen to you, that you start working with 2 or more different clusters in
kubernetes. At this point, you'll want to have multiple config files, instead of
replacing &lt;code&gt;~/.kube/config&lt;/code&gt;, which is fine the first few times.&lt;/p&gt;
&lt;p&gt;In order to do this we only need to set &lt;code&gt;KUBECONFIG&lt;/code&gt; env variable with the path to the kubeconfigs.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;configs&lt;/code&gt; folder, where the kubernetes config files will live.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;mkdir -p ~/.kube/configs
&lt;/pre&gt;
&lt;p&gt;The next thing is to add the env variable to our &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.profile&lt;/code&gt; file,
with the location of our configurations. The paths should be separated by a &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KUBECONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.kube/configs/gke-config:&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.kube/configs/eks-config
&lt;/pre&gt;
&lt;p&gt;Reloading our terminal with &lt;code&gt;. ~/.bashrc&lt;/code&gt;, or opening a new one should pick up the changes.&lt;/p&gt;
&lt;h4&gt;Automating the config detection&lt;/h4&gt;
&lt;p&gt;Why not automate this? So everytime we add a new kubeconfig, it's detected automatically.&lt;/p&gt;
&lt;p&gt;Here's my attempt, place this snippet in your &lt;code&gt;.bashrc&lt;/code&gt; or any other terminal file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;set_kubeconfig&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; entry &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.kube/configs"&lt;/span&gt;/*
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# Get files which do not include "skip"&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$entry&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$entry&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; *&lt;span class="s2"&gt;"skip"&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nv"&gt;kubeconfigs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$kubeconfigs&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$entry&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

    &lt;span class="c1"&gt;# Clean first colons&lt;/span&gt;
    &lt;span class="nv"&gt;kubeconfigs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;kubeconfigs&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KUBECONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$kubeconfigs&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Execute the function&lt;/span&gt;
set_kubeconfig
&lt;/pre&gt;
&lt;p&gt;This script will get all the &lt;strong&gt;files&lt;/strong&gt; inside &lt;code&gt;~/.kube/configs&lt;/code&gt;,
which do not include &lt;code&gt;skip&lt;/code&gt; in their name, and will set the &lt;code&gt;KUBECONFIG&lt;/code&gt;
variable to the found files.&lt;/p&gt;
&lt;h4&gt;Switching context and namespace&lt;/h4&gt;
&lt;p&gt;Now that our configs are detected automatically, we still have to change manually between
contexts and namespaces. I'll leave here the shortcuts&lt;/p&gt;
&lt;p&gt;Remember that a context is a mix of [cluster, namespace, user].&lt;/p&gt;
&lt;h5&gt;Current configuration&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;kubectl config view --minify  &lt;span class="c1"&gt;# without minify we'll see all the configs&lt;/span&gt;
&lt;/pre&gt;
&lt;h5&gt;List contexts&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;kubectl config get-contexts
&lt;/pre&gt;
&lt;h5&gt;Swtich context&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;kubectl config use-context &amp;lt;context_name&amp;gt;
&lt;/pre&gt;
&lt;h5&gt;Switch namespace&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;kubectl config set-context --current --namespace&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;new_namespace&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Find me on twitter: &lt;a href="https://twitter.com/santiwilly"&gt;@santiwilly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</description><guid>https://woile.dev/es/posts/multiple-configurations-in-kubernetes/</guid><pubDate>Fri, 08 Nov 2019 18:15:28 GMT</pubDate></item><item><title>PyCon France 2019 experience</title><link>https://woile.dev/es/posts/pycon-france-2019-experience/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;&lt;img alt="mural in bordeaux city" src="https://woile.dev/images/pycon-fr-2019/fox.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This year (2019) I had the opportunity to participate as a speaker at &lt;a href="https://www.pycon.fr/2019/"&gt;PyCon France&lt;/a&gt;,
and it was a great experience.
The event was held in &lt;strong&gt;Bordeaux, France&lt;/strong&gt;, a super cozy city, famous for its wines.&lt;/p&gt;
&lt;p&gt;I realize now that every country claims they have the best wine, including mine.
I have to say, though, that I loved Bordeaux wines, and I bought 4 to bring back home.&lt;/p&gt;
&lt;h3&gt;Highlights of PyFrance&lt;/h3&gt;
&lt;p&gt;&lt;img alt="marcos in bordeaux" src="https://woile.dev/images/pycon-fr-2019/marcos.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Everyone was kind to me and I felt really comfortable at the conference.
It somehow reminded me of the Argentinian PyCon, maybe because it's free for everyone.&lt;/p&gt;
&lt;p&gt;I really liked the &lt;strong&gt;"badge"&lt;/strong&gt; approach. On arrival, you could pick some "flags".
I chose the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"I speak english"&lt;/li&gt;
&lt;li&gt;"Speaker"&lt;/li&gt;
&lt;li&gt;"First time"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some cool others: "Do not talk to me", "No pics please", "Volunteer".&lt;/p&gt;
&lt;p&gt;They also had an &lt;strong&gt;automatic captioning tool&lt;/strong&gt;, which generated the transcription
live.&lt;/p&gt;
&lt;p&gt;I met a bunch of new people and had some interesting talks.&lt;/p&gt;
&lt;p&gt;There were some talks I couldn't attend because of the language barrier
(I don't speak French). But there's no one to blame for this.&lt;/p&gt;
&lt;p&gt;The talk I enjoyed the most was the keynote about &lt;strong&gt;"The Role of 21st Century Technology in Protests"&lt;/strong&gt;.
It gave me a lot to think about.
First, I'm amazed by the creativity and cleverness of the Hong Kong people and
their constant push to prevent incidents.
Please look up all the stuff they did to counter police efforts to capture people.
And second, about the role technology has in society.
When left in autocratic hands, it can quickly deviate and be used to harm people,
&lt;strong&gt;no matter how good intentions are at the beginning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Technology, in the way's being used in some countries, is scary.
What is even scarier is that people are not aware of the dangers.&lt;/p&gt;
&lt;p&gt;The only lesson I take from this is that &lt;strong&gt;education&lt;/strong&gt; is key.
The more education a person receives, the more resilient, and shielded they become
against foreign evil "human" agents, like vaccines.
And I mean education, not indoctrination, though in practice it may be harder
to draw the line.&lt;/p&gt;
&lt;h3&gt;My Presentation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="me talking at pycon fr 2019" src="https://woile.dev/images/pycon-fr-2019/santi.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I prepared the talk for over 3 weeks: &lt;a href="https://woile.github.io/pytest-presentation/"&gt;Pytest yes, let's go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Every talk I give takes me a lot of time and effort.
I find it really hard to come up with the slides quickly.
Luckily I got positive feedback over my talk, so I left the conference quite proud.&lt;/p&gt;
&lt;p&gt;For my next pycon (whichever I end up attending), I think I know the topic I'll discuss about: &lt;strong&gt;Documentation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Find me on twitter: &lt;a href="https://twitter.com/santiwilly"&gt;@santiwilly&lt;/a&gt;&lt;/p&gt;</description><guid>https://woile.dev/es/posts/pycon-france-2019-experience/</guid><pubDate>Tue, 05 Nov 2019 15:59:16 GMT</pubDate></item><item><title>Sharing passwords using gopass, git and gpg</title><link>https://woile.dev/es/posts/sharing-team-secrets/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of storing your passwords in unreliable but convenient places?&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of sharing password across unreliable platforms? slack, notes, etc&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of having your team passwords in no specific place?&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you have answer to any of this questions with a yes, then you might find&lt;/div&gt;
&lt;div class="line"&gt;this post quite useful. If your answer was no, read it anyway, you are&lt;/div&gt;
&lt;div class="line"&gt;already here.&lt;/div&gt;
&lt;/div&gt;
&lt;img src="https://media.giphy.com/media/5VKbvrjxpVJCM/giphy.gif"&gt;&lt;p&gt;&lt;a href="https://woile.dev/es/posts/sharing-team-secrets/"&gt;Leer mÃ¡sâ¦&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><guid>https://woile.dev/es/posts/sharing-team-secrets/</guid><pubDate>Mon, 18 Mar 2019 16:34:36 GMT</pubDate></item></channel></rss>