<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog</title><link>https://woile.dev/</link><description>Software Engineer, Python dev</description><atom:link href="https://woile.dev/es/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2023 &lt;a href="mailto:santiwilly@gmail.com"&gt;Woile&lt;/a&gt; </copyright><lastBuildDate>Sun, 15 Jan 2023 08:57:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Nix journey part 3: learning nix-lang</title><link>https://woile.dev/es/posts/nix-journey-part-3-learning-nix-lang/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;I started reading the &lt;a href="https://nix.dev/tutorials/nix-language"&gt;nix-language&lt;/a&gt; tutorial that helps you understand the &lt;a href="https://nixos.org/manual/nix/stable/language/index.html"&gt;nix-lang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The explanation that has made more sense so far is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are familiar with JSON, imagine the Nix language as &lt;em&gt;JSON with functions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nix language data types &lt;em&gt;without functions&lt;/em&gt; work just like their counterparts in JSON and look very similar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here's a comparison:&lt;/p&gt;
&lt;p&gt;nix:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;{
  string = "hello";
  integer = 1;
  float = 3.141;
  bool = true;
  null = null;
  list = [ 1 "two" false ];
  attribute-set = {
    a = "hello";
    b = 2;
    c = 2.718;
    d = false;
  }; # comments are supported
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;json:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{
  "string": "hello",
  "integer": 1,
  "float": 3.141,
  "bool": true,
  "null": null,
  "list": [1, "two", false],
  "object": {
    "a": "hello",
    "b": 1,
    "c": 2.718,
    "d": false
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like what I see. Why not making it more similar to json though?&lt;/p&gt;
&lt;p&gt;Here I'm listing my thoughts while reading. I hope this feedback can help improve the docs (I can't yet as I literally know nothing, taking it as a brain dump):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why no comma separated arrays? My hand automatically tries to add commas when making a list. Maybe an explanation would help to avoid people's complaints like me.&lt;/li&gt;
&lt;li&gt;JSON with comments + functions? Sounds like a plan&lt;/li&gt;
&lt;li&gt;Pure language, meaning no interaction with the outside world, except when reading files. I like this&lt;ol&gt;
&lt;li&gt;Does it mean there's no &lt;code&gt;print&lt;/code&gt;? is the output of executing nix a &lt;code&gt;print&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I bet I'll have to learn some builtin functions to understand it better&lt;/li&gt;
&lt;li&gt;String concatenation is straightforward, nothing weird here &lt;code&gt;"a" + " " + "b"&lt;/code&gt; works as expected. Good.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let .. in ...&lt;/code&gt; is weird, are they like function declarations? Strange way to create a local scope.&lt;/li&gt;
&lt;li&gt;semicolons &lt;code&gt;;&lt;/code&gt; only  after initializing variables.&lt;/li&gt;
&lt;li&gt;Could this language be used to replace &lt;code&gt;yaml&lt;/code&gt; and other configuration formats? What about &lt;code&gt;toml&lt;/code&gt; with functions? Okay, I'm derailing, back to reading.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's not very intuitive, let's see some valid samples
&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  a = {
    x = 1;
    y = 2;
    z = 3;
  };
in
a.x + a.y&lt;/code&gt;&lt;/pre&gt;
it doesn't end with semicolon, outputs: 3. Ok
Now the &lt;code&gt;with&lt;/code&gt; + assignment
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  a = {
    x = 1;
    y = 2;
    z = 3;
  };
in
b = with a; {t = x; u = y;}&lt;/code&gt;&lt;/pre&gt;
error. Solution? wrap with &lt;code&gt;{}&lt;/code&gt; and introduce semicolon
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  a = {
    x = 1;
    y = 2;
    z = 3;
  };
in {
  b = with a; {t = x; u = y;};
}&lt;/code&gt;&lt;/pre&gt;
Works. Whatever. How do I add &lt;code&gt;b.x&lt;/code&gt; + &lt;code&gt;b.y&lt;/code&gt;?
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  a = {
    x = 1;
    y = 2;
    z = 3;
  };
in {
  b = with a; {t = x; u = y;};
  b.t + b.u
}&lt;/code&gt;&lt;/pre&gt;
Nope, maybe the &lt;code&gt;let.. in...&lt;/code&gt; I just learned?
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  a = {
    x = 1;
    y = 2;
    z = 3;
  };
in {
  let b = with a; {t = x; u = y;};
  in
  b.t + b.u
}&lt;/code&gt;&lt;/pre&gt;
Nope. Couldn't find an explanation, maybe it's not allowed.
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: user &lt;a href="https://www.reddit.com/user/benide/"&gt;benide&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/Nix/comments/10bp1vw/nix_journey_part_3_learning_nixlang/"&gt;/r/nix&lt;/a&gt; pointed out that my scoped curly braces &lt;code&gt;{}&lt;/code&gt; are actually attrsets (json object), that's why the semi-colons &lt;code&gt;;&lt;/code&gt; are required, makes much more sense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why cannot coerce an int into a string? I don't see an explanation. Types could implement like a &lt;code&gt;Into&amp;lt;string&amp;gt;&lt;/code&gt; trait, right? Maybe there's a good reason, but I think this can be useful for naming things &lt;code&gt;[ home-1 home-2 ]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Integration with fs is dope.&lt;/li&gt;
&lt;li&gt;How are search path populated? &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; works, but &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; does not. Are there other variables? Good thing it's not recommended to use them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Indented strings&lt;/code&gt; are fantastic. The equal amount of space trimmed is perfect for writing scripts that look good, without compromising style.
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;let
  uglyyaml = ''
  holis:
    machines:
      - m1
      - m2
  '';
in
  uglyyaml&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well I'm done, it was worthy. After reading the quick overview I understand much more. So much I was able to create my own shell from a flake. This is the sample &lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-nix"&gt;/*
  This flake provides a shell where you can add flakes

  Adding dependencies:
    1. Add your flake repository as an input url
    2. Add the repository name to the function signature
    3. Add your repo's package to buildInputs

  Opening shell with your deps:
    ```sh
    nix develop
    ```

  For compatibility with nix-shell add the template compat:
    ```sh
    nix flake new . -t templates#compat
    ```
*/
{
  description = "Build your own shell";
  inputs = {
    utils = { url = "github:numtide/flake-utils"; };
    wpa_passphrase_rs = { url = "github:woile/wpa_passphrase_rs/main"; };
    # point 1: add repo url
  };
  # point 2: add to function
  outputs = { self, nixpkgs, utils, wpa_passphrase_rs }:
    utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
      in
      {
        devShell = with pkgs; mkShell {
          # point 3: add package
          buildInputs = [
            gnugrep
            gnused
            wpa_passphrase_rs.defaultPackage.${system}
          ];
        };
      }
    );
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;nix-develop&lt;/code&gt; and you'll have a shell with your dependencies.
Question: How do I keep using my own shell?&lt;/p&gt;
&lt;p&gt;You can copy-paste and extend that sample into your projects. I asked on github if it could be merged &lt;a href="https://github.com/NixOS/templates/issues/59"&gt;#59&lt;/a&gt;. Again, as a newbie in nix I don't know if it makes sense from nix perspective. Am I supposed to be doing things this way in nix?&lt;/p&gt;
&lt;p&gt;What I've been thinking is that I would like a &lt;code&gt;cli&lt;/code&gt; that adds the code for me to the &lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;$ flakectl add dep github:woile/wpa_passphrase_rs
Searching packages...
1. packages.x86_64-darwin.wpa_passphrase (0.1.0)

Choose package to add [int]:
1

Does the package provide a service? [y/N]
n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to add more things:&lt;/p&gt;
&lt;p&gt;Environmental variables (maybe even encrypted using &lt;a href="https://github.com/ryantm/agenix"&gt;agenix&lt;/a&gt;):
&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;$ flakectl add env SRC_FOLDER=foobar
Adding variables to your flake.nix...

After running `nix develop` or `nix-shell` to see your variable run:
`echo $SRC_FOLDER`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Language support&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;$ flakectl add lang python rust
Adding support for python and rust to your flake.nix...

Use `nix build py` to create a python wheel
Use `nix build rs` to compile the rust code.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;$ flakectl add script deploy --bang py
Adding `deploy` script to your flake.nix...

Use `nix run deploy` to execute the script.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would something like this make sense as output?&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;$ tree scripts
scripts/
└── deploy.nix&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And maybe some other ways to manipulate the flake itself. This way I can "ask" for the things I want, and later take a look at the result of the flake itself, without having to know much of nix-lang, and learning on the way.&lt;/p&gt;
&lt;p&gt;The question is: What are common things people need?&lt;/p&gt;
&lt;p&gt;It could be done with rust implementation of the AST parser &lt;a href="https://github.com/nix-community/rnix-parser"&gt;rnix-parser&lt;/a&gt;. Unfortunately I don't have much time to dig into this idea. Let me know if you do!&lt;/p&gt;
&lt;p&gt;Thanks for reading again.&lt;/p&gt;
&lt;p&gt;Find me on &lt;a href="https://hachyderm.io/@woile"&gt;@woile@hachyderm&lt;/a&gt;&lt;/p&gt;</description><guid>https://woile.dev/es/posts/nix-journey-part-3-learning-nix-lang/</guid><pubDate>Sat, 14 Jan 2023 13:26:08 GMT</pubDate></item><item><title>Nix journey part 2: replacing apt and brew</title><link>https://woile.dev/es/posts/nix-journey-part-2-replacing-apt-and-brew/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Even if I still cannot do much with &lt;a href="https://nixos.org/"&gt;nix&lt;/a&gt;, it still provide more advantages over other package managers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-platform (mac, linux, etc.)&lt;/li&gt;
&lt;li&gt;Supports side-by-side installation of multiple versions of a package&lt;/li&gt;
&lt;li&gt;Makes it trivial to share development and build environments&lt;/li&gt;
&lt;li&gt;Nix ensures that installing or upgrading one package cannot break other packages&lt;/li&gt;
&lt;li&gt;It has the biggest database of packages (over 80.000 packages)&lt;/li&gt;
&lt;li&gt;I can run other people's commands, for example if I clone a repo and it says "run this nix command to have a development environment", then it doesn't matter if I don't know, I have already started using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common situation I often have between linux and mac is running &lt;code&gt;grip&lt;/code&gt; or &lt;code&gt;sed&lt;/code&gt;.
On linux, they are called GNU &lt;code&gt;grep&lt;/code&gt; or GNU &lt;code&gt;sed&lt;/code&gt;, and they are not the same as in mac (freebsd versin), they may not accept the same parameters.
We are gonna see how can to avoid this using nix. And even without using complicated features, it can make your CI system more reproducible.&lt;/p&gt;
&lt;p&gt;Remember &lt;code&gt;nix&lt;/code&gt; is 3 things at the same time: an OS, a package manager and a language.&lt;/p&gt;
&lt;p&gt;This post is about the &lt;strong&gt;package manager&lt;/strong&gt;. I don't have much interest in the language, but more and more I think I'll have to learn it.&lt;/p&gt;
&lt;p&gt;Let's start by acknowledging a source of confusion:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is an old interface with counterintuitive commands&lt;/strong&gt; (&lt;code&gt;nix-env -iA ...&lt;/code&gt;, &lt;code&gt;nix-shell -p ...&lt;/code&gt;), which I found hard to remember, and I don't get why they "commands" start with a dash (&lt;code&gt;-&lt;/code&gt;). I'm used to cli's doing &lt;code&gt;cli &amp;lt;command&amp;gt; [--options]&lt;/code&gt;. Nowadays there's a new cli called just &lt;code&gt;nix&lt;/code&gt;, let's see if we can do everything with it.&lt;/p&gt;
&lt;p&gt;And make sure you have &lt;a href="https://nixos.org/download.html"&gt;installed Nix: the package manager&lt;/a&gt; in your system. The installation is straightforward. I was personally blocked, because at some point in my dotfiles I was hardcoding the &lt;code&gt;PATH&lt;/code&gt;, making nix never appear 🤦‍♂️.&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://nixos.wiki/wiki/Flakes#Enable_flakes"&gt;enable flakes&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing packages&lt;/h3&gt;
&lt;p&gt;Install a package like on &lt;code&gt;brew&lt;/code&gt; or &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix profile install nixpkgs#htop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See also the &lt;a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-profile-install.html"&gt;profile install command reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the old version of nix, we would run:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix-env -iA nixpkgs.htop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nix forces us to specify a "repository" (or "namespace") when installing a package (&lt;code&gt;nixpkgs&lt;/code&gt;), which could be different, like github. And I think this is a good thing. From my understanding, nix doesn't care where the package is, because each package has a lock file, tracking all the dependencies. Okay, it could be a problem if one of the "repositories" is down, but using &lt;code&gt;nixpkgs&lt;/code&gt; mainly and github for niche packages should be fine.&lt;/p&gt;
&lt;h4&gt;What are profiles?&lt;/h4&gt;
&lt;p&gt;Disclaimer: I may be wrong on this, I'm starting to understand it.&lt;/p&gt;
&lt;p&gt;The way to see &lt;code&gt;profiles&lt;/code&gt; is like "your user's packages". &lt;code&gt;nix profile&lt;/code&gt; links packages to your &lt;code&gt;~/.nix-profile/&lt;/code&gt;. You can specify other's profiles by using the flag &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can find more in the &lt;a href="https://nixos.org/manual/nix/stable/package-management/profiles.html"&gt;package-management section of the manual&lt;/a&gt; and &lt;a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-profile.html"&gt;the profile command reference&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Searching packages&lt;/h3&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix search nixpkgs#htop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the &lt;a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-search.html"&gt;search command reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We see again &lt;code&gt;nixpkgs&lt;/code&gt;, because we have to let nix know from where, and then what we are looking for (&lt;code&gt;htop&lt;/code&gt; in this case). To remember the word, I split it like this: &lt;code&gt;nix-p-k-gs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, I've made a flake package, hosted on github, and you can search what is offering, by specifying the "repository" only (no &lt;code&gt;#&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix search 'github:woile/wpa_passphrase_rs'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also search packages on &lt;a href="https://search.nixos.org/packages?channel=22.11&amp;amp;show=htop&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=htop"&gt;nix search index&lt;/a&gt;, but the commands shown are for the old nix interface, using &lt;code&gt;nix-env&lt;/code&gt; or &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, you can provide a regex like &lt;code&gt;firefox|chrome&lt;/code&gt;, run &lt;code&gt;nix search --help&lt;/code&gt; for more examples.&lt;/p&gt;
&lt;h3&gt;Removing packages&lt;/h3&gt;
&lt;p&gt;Now this is a bit tricky, to remove you cannot type &lt;code&gt;htop&lt;/code&gt;, you have to specify which dependency you want to clean. I think this is because one of your packages may depend on the version of another package, and if you also installed another version of the same package, then if you remove both, the original program that depends on one of them may break.&lt;/p&gt;
&lt;p&gt;The solution to this is to list the installed packages in your profile, and then remove by position of said program.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix profile list&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix profile remove 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the &lt;a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-profile-remove.html"&gt;profile remove command reference&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Open a package on a shell&lt;/h3&gt;
&lt;p&gt;This can be useful to test in isolation without installing a package in your profile.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix shell nixpkgs#htop nixpkgs#gnused nixpkgs#youtube-dl

sed --help
htop --help
youtube-dl --version
CTRL+D # exit&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Nix package manager (npt)&lt;/h3&gt;
&lt;p&gt;Because I'm not used to most of the seen commands, I built a thin abstraction on top called &lt;a href="https://github.com/woile/npt"&gt;npt&lt;/a&gt;. Which aims to be a humble succesor to &lt;code&gt;apt&lt;/code&gt;. It also requires less characters to use it.&lt;/p&gt;
&lt;p&gt;The installation, as we've seen before, can be done by running:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix profile install 'github:woile/npt#npt'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then run &lt;code&gt;npt --help&lt;/code&gt; and check the commands, I hope it helps the transition to nix.&lt;/p&gt;
&lt;p&gt;Now you can install packages by doing:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;npt install htop github:woile/wpa_passphrase_rs#wpa_passphrase
# or npt i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's still a work in progress, but a good start. I want to add to it the ability to show the executed nix commands, as a way to learn.&lt;/p&gt;
&lt;h3&gt;Reproducible scripts&lt;/h3&gt;
&lt;p&gt;Remember when I said even if you don't know much, someone else might, and having nix helps for this? and remember when I talked about my problems with &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Turns out nix can help in both of these situations, someone can write a reproducible shell script which you would execute, even without knowing much, it would work.&lt;/p&gt;
&lt;p&gt;A minor problem is that we cannot use flakes yet, meaning we cannot run &lt;code&gt;nix shell&lt;/code&gt; and instead, we have to rely on &lt;code&gt;nix-shell&lt;/code&gt;. But it's coming, see &lt;a href="https://github.com/NixOS/nix/pull/5189"&gt;#5189&lt;/a&gt;, &lt;a href="https://github.com/NixOS/nix/issues/4715"&gt;#4715&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the meantime, let's try to solve the issue with what we have.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;touch gnu-example.sh
chmod +x gnu-example.sh
vim gnu-example.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And paste the content of this script:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;#! /usr/bin/env nix-shell
#! nix-shell gnused gnugrep

grep -V
sed --version&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If run &lt;code&gt;./gnu-example.sh&lt;/code&gt;, it would work both on linux, mac and probably also on freebsd.&lt;/p&gt;
&lt;p&gt;Take a look at this other example, you can install a specific version of python and even dependencies.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;#! /usr/bin/env nix-shell
#! nix-shell --pure -i python -p "python38.withPackages (ps: [ ps.django ])"

import django
print(django.__version__)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This opens the door to replace &lt;code&gt;pyenv&lt;/code&gt; and any &lt;code&gt;virtualenv&lt;/code&gt; you will ever need.&lt;/p&gt;
&lt;p&gt;Imagine creating a nix file specific to your project with its dependencies, that you load only when in the project folder. Say goodbye any version manager (&lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;nvm&lt;/code&gt;, etc).&lt;/p&gt;
&lt;p&gt;You can read more about building a &lt;code&gt;shell.nix&lt;/code&gt; in the &lt;a href="https://nix.dev/tutorials/declarative-and-reproducible-developer-environments"&gt;nix.dev tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope you've learned something with this post, and if you liked it, please let me know in the comments section below or tag me on hachyderm &lt;a href="https://hachyderm.io/@woile"&gt;@woile&lt;/a&gt;.&lt;/p&gt;</description><guid>https://woile.dev/es/posts/nix-journey-part-2-replacing-apt-and-brew/</guid><pubDate>Sun, 08 Jan 2023 14:34:49 GMT</pubDate></item><item><title>Nix journey part 1: creating a flake</title><link>https://woile.dev/es/posts/nix-journey-part-1-creating-a-flake/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;I've started building my own home media center, and I thought it would be a good idea to learn something new and try to make it reproducible, thus I thought of &lt;a href="https://nixos.org/"&gt;nix&lt;/a&gt; for this. Nix is an operating system (which we won't care now), a language (also don't care for now), and a &lt;strong&gt;package manager&lt;/strong&gt;.
We are gonna focus on the package manager part alone, which is already a lot for my brain. This package manager works on mac and linux, and it already has many packages available (bye bye interop problems between mac/linux?)&lt;/p&gt;
&lt;p&gt;The first thing I needed for my raspberry pi was to create a PSK password using &lt;code&gt;wpa_password&lt;/code&gt;, and I tried to run it inside a nix shell on my mac, which didn't work, because &lt;code&gt;wpa_password&lt;/code&gt; doesn't run on a mac.
This was a good opportunity to write something fast, and to make it reusable and reproducible from any unix OS using nix.&lt;/p&gt;
&lt;h3&gt;Objectives&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a nix package for &lt;code&gt;wpa_password&lt;/code&gt; (a nix flake)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;wpa_password&lt;/code&gt; in my home-media project. I want to jump into a shell with the &lt;code&gt;wpa_password&lt;/code&gt; from any unix os, mac or linux (freebsd at some point?)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Creating a nix package&lt;/h3&gt;
&lt;p&gt;I ended up writing the utility in rust, which took me a bunch of hours, the repo &lt;a href="https://github.com/woile/wpa_passphrase_rs"&gt;wpa_passphrase_rs&lt;/a&gt; contains the project finalized.&lt;/p&gt;
&lt;p&gt;After a lot of reading, and wrapping my mind around nix, which I had 0 knowledge before, everything points out that flakes are the new kid in town, and that's what I should use in my project.&lt;/p&gt;
&lt;p&gt;I have a take on nix status, which may need corroboration: nix is moving away from the old way to the new (flakes) way, and there are many outdated posts, and commands. Many commands that fit the pattern &lt;code&gt;nix-*&lt;/code&gt; are no longer used, and instead people now use the new &lt;code&gt;nix &amp;lt;command&amp;gt;&lt;/code&gt; instead. For example, things like &lt;code&gt;nix-shell&lt;/code&gt; are not used much anymore.&lt;/p&gt;
&lt;p&gt;Going back to the nix flake, If you have &lt;a href="https://nixos.org/download.html"&gt;installed nix&lt;/a&gt;, &lt;strong&gt;flakes must be enabled&lt;/strong&gt;, because it's an experimental feature.&lt;/p&gt;
&lt;p&gt;For mac (which only supports multiuser installation):&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;echo 'experimental-features = nix-command flakes' &amp;gt;&amp;gt; /etc/nix/nix.conf
# you may use ~/.config/nix/nix.conf on linux&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;What are flakes?&lt;/h4&gt;
&lt;p&gt;According to &lt;a href="https://nixos.wiki/wiki/Flakes"&gt;nix's wiki&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flakes allow you to specify your code's dependencies (e.g. remote Git repositories) in a &lt;strong&gt;declarative way&lt;/strong&gt;, simply by listing them inside a &lt;code&gt;flake.nix&lt;/code&gt; file.
Each dependency gets pinned, that is: its commit hash gets automatically stored into a file - named &lt;code&gt;flake.lock&lt;/code&gt; - making it easy to, upgrade it
Flakes replace the nix-channels command and things like ad-hoc invocations of &lt;code&gt;builtins.fetchgit&lt;/code&gt; - no more worrying about keeping your channels in sync, no more worrying about forgetting about a dependency deep down in your tree: everything's at hand right inside &lt;code&gt;flake.lock&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like we are gonna need two files: &lt;code&gt;flake.nix&lt;/code&gt; and &lt;code&gt;flake.lock&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to create the flake from a template. What available templates do we have? I wonder...&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix flake show templates&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;github:NixOS/templates/2d6dcce2f3898090c8eda16a16abdff8a80e8ebf
├───defaultTemplate: template: A very basic flake
└───templates
    ├───bash-hello: template: An over-engineered Hello World in bash
    ├───c-hello: template: An over-engineered Hello World in C
    ├───compat: template: A default.nix and shell.nix for backward compatibility with Nix installations that don't support flakes
    ├───full: template: A template that shows all standard flake outputs
    ├───go-hello: template: A simple Go package
    ├───haskell-hello: template: A Hello World in Haskell with one dependency
    ├───haskell-nix: template: An haskell.nix template using hix
    ├───hercules-ci: template: An example for Hercules-CI, containing only the necessary attributes for adding to your project.
    ├───pandoc-xelatex: template: A report built with Pandoc, XeLaTex and a custom font
    ├───python: template: Python template, using poetry2nix
    ├───rust: template: Rust template, using Naersk
    ├───rust-web-server: template: A Rust web server including a NixOS module
    ├───simpleContainer: template: A NixOS container running apache-httpd
    └───trivial: template: A very basic flake&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fantastic! Look at that! There's a python version and even a rust web server. The one I need is the rust template, let's use that one as a base.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix flake init -t templates#rust&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that was it, it worked. This is going well. I can create a binary inside &lt;code&gt;./result/bin&lt;/code&gt; by running&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or use it by running&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My mind is blown at this point 🤯&lt;/p&gt;
&lt;h3&gt;Using the flake somewhere else&lt;/h3&gt;
&lt;p&gt;I couldn't find much about this, as I said, there's a mix of old and new information.
I think it clicked for me, when I realized that the &lt;code&gt;nix&lt;/code&gt; command is new, and it's integration with flakes goes to its core (am I correct on this?).&lt;/p&gt;
&lt;p&gt;Using the flake becomes straightforward.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;nix shell 'github:woile/wpa_passphrase_rs'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;wpa_password&lt;/code&gt; will appear on my &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;wpa_password --help&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can exit with a &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;D&lt;/kbd&gt;.&lt;/p&gt;
&lt;h3&gt;What's next?&lt;/h3&gt;
&lt;p&gt;What's the right way to make it declarative? I want to have a file with the dependencies required for my home media project, and I'd like to jump into a shell with everything present.&lt;/p&gt;
&lt;p&gt;Is there a different strategy for this?&lt;/p&gt;
&lt;p&gt;How to use &lt;a href="https://github.com/NixOS/nixops"&gt;NixOps&lt;/a&gt; to provision all my raspberries and any other machine that joins the fleet?&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://nixos.wiki/wiki/Ubuntu_vs._NixOS"&gt;comparison between Ubuntu and Nix&lt;/a&gt; appears to be useful, I should read as well.&lt;/p&gt;
&lt;p&gt;Please let me know in the comments section below or tag me on hachyderm &lt;a href="https://hachyderm.io/@woile"&gt;@woile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading&lt;/p&gt;</description><guid>https://woile.dev/es/posts/nix-journey-part-1-creating-a-flake/</guid><pubDate>Fri, 30 Dec 2022 16:04:18 GMT</pubDate></item><item><title>A Rust web app with HTML templates</title><link>https://woile.dev/es/posts/web-app-with-template-in-rust/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;The other day, I was helping my girlfriend with Go templates in a web server, and the internet is full of tutorials and explanations. And I thought, what about doing the same in Rust? How hard can it be?&lt;/p&gt;
&lt;p&gt;Spoilers: it's easy, but there's not much information around&lt;/p&gt;
&lt;p&gt;Let's change that!&lt;/p&gt;
&lt;h3&gt;The stack&lt;/h3&gt;
&lt;p&gt;If you come from a language with a big standard library like Go, you should know that rust is a bit more lightweight. The language has decided to provide a slim std library with a top of the line package manager and tools. It's up to the community to provide packages like web servers or templating.&lt;/p&gt;
&lt;p&gt;If you come from Python, even though there's a big standard library, when doing web, is not used by developers. Instead, you are probably used to libraries like Django, Jinja2 or Fastapi. If that's the case, you are gonna feel familiar with the following stack.&lt;/p&gt;
&lt;p&gt;This makes me wonder... will Go end up in the same direction as python? Is there something in the standard library that the community doesn't use, and instead, relies on a third party package? Anyways...&lt;/p&gt;
&lt;p&gt;If you come from Javascript, you are probably used to installing many dependencies, so you are already familiar with what's coming next.&lt;/p&gt;
&lt;p&gt;Let's get back to our stack.&lt;/p&gt;
&lt;h4&gt;Axum&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; is one of the favorite web frameworks in the rust landscape. It's not as mature as Actix Web (which continues to rock). But it's getting a lot of traction, because of it's great integration with tokio and its ecosystem. &lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; was created by &lt;a href="https://github.com/davidpdrsn"&gt;David Pedersen&lt;/a&gt; from &lt;a href="https://github.com/EmbarkStudios"&gt;EmbarkStudios&lt;/a&gt;. This company seems to be taking rust to the next level 🙌🏼 🚀.&lt;/p&gt;
&lt;h4&gt;Minijinja&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/mitsuhiko/minijinja/"&gt;Minijinja&lt;/a&gt; is the rust implementation of Python's Jinja2 by the very same awesome author: &lt;a href="https://lucumr.pocoo.org/"&gt;mitsuhiko&lt;/a&gt;. A lot of people are already familiar with it and with good reason, it's easy to use.&lt;/p&gt;
&lt;h4&gt;Tokio&lt;/h4&gt;
&lt;p&gt;The most popular async runtime. It's ideal for writing network applications. Like our web app, built with Axum.
&lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt; has a big ecosystem, from tracing to database drivers.&lt;/p&gt;
&lt;h4&gt;Serde&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt; again, is the most popular way to serialize and deserialize data structures in rust. You serialize or deserialize from one format to another. For example, if you receive a JSON as bytes from an HTTP request, with serde you are going to be able to read the different fields, or load some of that information into a &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt;'s most common way to use is to derive the &lt;code&gt;Serialize&lt;/code&gt; or &lt;code&gt;Deserialize&lt;/code&gt; macros in your &lt;code&gt;struct&lt;/code&gt;. From there,
you can probably read from, or serialize into different formats, many implemented by the community. Some of the list include JSON, TOML, AVRO, and more.&lt;/p&gt;
&lt;p&gt;In our case, minijinja requires the &lt;code&gt;Serialize&lt;/code&gt; macro in our structs to render the templates.&lt;/p&gt;
&lt;h3&gt;Set up&lt;/h3&gt;
&lt;p&gt;You've already &lt;a href="https://www.rust-lang.org/tools/install"&gt;installed rust&lt;/a&gt;, so go to your projects folder
and create a new rust project.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;cargo new web-template-rs
cd web-template-rs/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the following dependencies.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;cargo add axum \
    tokio -F tokio/full \
    serde -F serde/derive \
    minijinja -F minijinja/builtins&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the &lt;code&gt;-F&lt;/code&gt; flag to signal which features to include from those crates.&lt;/p&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;p&gt;We are now ready to start. And we won't need anything else.&lt;/p&gt;
&lt;p&gt;A basic webserver returning HTML without a template looks something like this:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rust"&gt;use axum::{response::Html, routing::get, Router};

async fn home() -&amp;gt; Html&amp;lt;&amp;amp;'static str&amp;gt; {
    Html("hello world")
}

#[tokio::main]
async fn main() {
    // build our application with a single route
    let app = Router::new()
        .route(
            "/",
            get(home),
        );

    // run it with hyper on localhost:3000
    axum::Server::bind(&amp;amp;"0.0.0.0:3000".parse().unwrap())
        .serve(app.into_make_service())
        .await
        .unwrap();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run our application we run&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;cargo run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we haven't configured any logging, you won't see anything in your terminal after running, that's fine.
If you want to learn how to do it, check the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/tracing-aka-logging"&gt;tracing-example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the meanwhile, in your browser go to &lt;code&gt;0.0.0.0:3000&lt;/code&gt; and observe the "hello world" text.&lt;/p&gt;
&lt;h4&gt;What has happened here?&lt;/h4&gt;
&lt;p&gt;When you type a URL or IP in the browser and press &lt;kbd&gt;enter&lt;/kbd&gt;, the browser will "craft"
a GET HTTP request, and send it over a TCP connection to the given IP. If you provide a URL instead (&lt;code&gt;www.example.com&lt;/code&gt;), the browser would have to resolve the IP through DNS. But in our case, we are using directly an IP.&lt;/p&gt;
&lt;p&gt;What are all these acronyms? &lt;a href="https://www.ietf.org/rfc/rfc793.html"&gt;TCP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc791.html"&gt;IP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc2616"&gt;HTTP&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc1035.html"&gt;DNS&lt;/a&gt;. They are all Internet Standards. Conventions to guarantee interoperability, they make the internet work. Then is up to people to make actual tools around those protocols. If you want your coffee machine to communicate over the internet, when you start coding its code, you will have to handle all those protocols (or find libraries that already do it for you).&lt;/p&gt;
&lt;p&gt;Remember: &lt;strong&gt;HTTP is plain text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The request your browser will craft, will look something like this:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-http"&gt;GET / HTTP/1.1
Host: localhost:3000
User-Agent: Mozilla/5.0
Accept: */*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it will be sent over the internet inside an HTTP request, which itself will travel inside a TCP packet, which itself travels inside an IP packet. But actually, we are doing this on our local machine, so it won't reach the internet, your computer knows there is someone listening to &lt;code&gt;0.0.0.0&lt;/code&gt; right away.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;   IP
 ┌────────────────────────────────┐
 │          TCP                   │
 │         ┌──────────────────────┤
 │         │           HTTP       │
 │         │          ┌───────────┤
 │         │          │  GET /    │
 └─────────┴──────────┴───────────┘&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The request will be received by our rust web server, and it will attempt to handle the "requested" path (&lt;code&gt;GET /&lt;/code&gt;).
No matter what language you use: rust, python, go, js, etc. requests are all plain text.&lt;/p&gt;
&lt;p&gt;Our rust web server, actually knows how to handle that request, because it includes a &lt;code&gt;route&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rs"&gt;// ...
.route(
    "/",
    get(home),
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;Axum&lt;/a&gt; sees the &lt;code&gt;/&lt;/code&gt; and it know it has a function to handle that path. That function actually means something like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return an HTTP response containing HTML with the text "hello world"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And what will axum create? &lt;strong&gt;a plain text HTTP response&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-http"&gt;HTTP/1.1 200 OK
content-type: text/html; charset=utf-8
content-length: 11
date: Mon, 17 Oct 2022 08:03:24 GMT

hello world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your browser will receive the response and render a nice white background with the given text.&lt;/p&gt;
&lt;p&gt;Enough with networking lessons woile! I want to know how to use templates.&lt;/p&gt;
&lt;p&gt;True, true... I forgot where were we going with all this... but do we know what templates are?&lt;/p&gt;
&lt;h3&gt;Templates&lt;/h3&gt;
&lt;p&gt;You mix a "custom language", with your target language. This way, you can output the target language from a different one. Let's say we want to create an HTML with a list of users from Rust, Python or Go:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Timmy&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Benji&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Mimi&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when we have a new user? We would have to edit it manually, right? Can we make this behave "dynamically" instead?&lt;/p&gt;
&lt;p&gt;Yes, using templates. Minijinja is a rust implementation of the popular python's &lt;code&gt;jinja2&lt;/code&gt;. A popular "template engine" with its own language. Template engines are endless, and they don't share the same syntax. Python django's template engine, Go templates, JSX (right?), lodash templates, and more. They end up being similar, they have a way to iterate, show data, or use conditions.&lt;/p&gt;
&lt;p&gt;Now with a template engine, we can write something like this:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;ul&amp;gt;
    {% for user in users %}
    &amp;lt;li&amp;gt;user.name&amp;lt;/li&amp;gt;
    {% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, our fictional user service, can take this template, fetch the users, and passing through the template, render the list of users.&lt;/p&gt;
&lt;p&gt;Templates can be a monstrosity. Most of the time, the tooling around them is not good, and you don't get an error until you actually try to render them, you may not get syntax highlight. For example, around Kubernetes there's a famous package manager "Helm", which uses templates on top of YAML. YAML is already a &lt;a href="https://noyaml.com/"&gt;controversial language&lt;/a&gt;, and with a template layer on top, it can become incredibly hard to read and maintain. Spite of this, templates are still &lt;strong&gt;convenient&lt;/strong&gt;, and I don't know of a better alternative.&lt;/p&gt;
&lt;h3&gt;Axum with templates&lt;/h3&gt;
&lt;p&gt;Back to our web application! This time, we are gonna create 2 fictional &lt;code&gt;structs&lt;/code&gt;, that we'll use as examples.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rs"&gt;use serde::Serialize;

#[derive(Debug, Serialize)]
struct Items {
    id: i32,
    name: String,
}

#[derive(Debug, Serialize)]
struct Profile {
    full_name: String,
    items: Vec&amp;lt;Items&amp;gt;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see we are using serde's &lt;code&gt;Serialize&lt;/code&gt;, so minijinja can use them. And &lt;code&gt;Profile.items&lt;/code&gt; is a &lt;code&gt;Vec&lt;/code&gt;, this way we can showcase an iteration example in the template.&lt;/p&gt;
&lt;p&gt;As we've seen templates, we are ready to write our jinja2 like template in rust.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rust"&gt;const PROFILE_TEMPLATE: &amp;amp;'static str = r#"
&amp;lt;!doctype html&amp;gt;

&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;

  &amp;lt;title&amp;gt;A Basic HTML5 Template&amp;lt;/title&amp;gt;
  &amp;lt;meta name="description" content="A basic HTML5 Template for new projects."&amp;gt;
  &amp;lt;meta name="author" content="Woile"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Profile of {{ profile.full_name|title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;This is a template example to show some functionality&amp;lt;/p&amp;gt;
    &amp;lt;h2&amp;gt;Items&amp;lt;/h3&amp;gt;
    &amp;lt;ul&amp;gt;
        {% for item in profile.items %}
        &amp;lt;li&amp;gt;{{ item.name }} ({{ item.id }})&amp;lt;/li&amp;gt;
        {% endfor %}
    &amp;lt;ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
"#;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right in the body of the HTML, we show the &lt;code&gt;profile.full_name&lt;/code&gt;, and then we iterate over each item, displaying the &lt;code&gt;name&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And for Axum, we add a new route, that will create some example structs.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rs"&gt;use axum::{response::Html, routing::get, Router, extract::Path};
use minijinja::render;

async fn home() -&amp;gt; Html&amp;lt;&amp;amp;'static str&amp;gt; {
    Html("hello world")
}

async fn get_profile(Path(profile_name): Path&amp;lt;String&amp;gt;) -&amp;gt; Html&amp;lt;String&amp;gt; {
    let orders_example = vec![
        Items {
            id: 1,
            name: "Article banana".into(),
        },
        Items {
            id: 2,
            name: "Article apple".into(),
        },
    ];
    let profile_example = Profile {
        full_name: profile_name,
        items: orders_example,
    };
    let r = render!(PROFILE_TEMPLATE, profile =&amp;gt; profile_example );
    Html(r)
}

#[tokio::main]
async fn main() {
    let app = Router::new()
        .route(
            "/",
            get(home),
        )
        .route(
            "/:profile_name",
            get(get_profile),
        );
    // run it with hyper on localhost:3000
    axum::Server::bind(&amp;amp;"0.0.0.0:3000".parse().unwrap())
        .serve(app.into_make_service())
        .await
        .unwrap();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Too complicated?&lt;/p&gt;
&lt;p&gt;Let's take a look at this 2 lines:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rust"&gt;"/:profile_name",
get(get_profile),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line is the &lt;code&gt;path&lt;/code&gt;, which is a the root &lt;code&gt;/&lt;/code&gt; + a variable value &lt;code&gt;:profile_name&lt;/code&gt;.
And right in the next line, we call the &lt;code&gt;get_profile&lt;/code&gt;, which we can see how it uses the &lt;code&gt;profile_name&lt;/code&gt; variable, extracted from the &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, we create the example &lt;code&gt;structs&lt;/code&gt;. In a real example, that information would probably come from a database.&lt;/p&gt;
&lt;p&gt;And then, inside the &lt;code&gt;get_profile&lt;/code&gt; we have:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-rust"&gt;let r = render!(PROFILE_TEMPLATE, profile =&amp;gt; profile_example );
Html(r)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;render!&lt;/code&gt; is minijinja's macro, that receives the template we previous declared, and then we provide some kind of "map" between the variables used in the template first, and then the rust variable.&lt;/p&gt;
&lt;p&gt;A downside here is, that if we have an error in our template, we are only going to see it during runtime.
But on the bright side, this introduction was a quick way to get started with templates and axum in Rust.&lt;/p&gt;
&lt;p&gt;The code is available on &lt;a href="https://github.com/woile/web-template-rs-example"&gt;github.com/woile/web-template-rs-example&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;Interested in what I write? follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/web-app-with-template-in-rust/</guid><pubDate>Sun, 16 Oct 2022 15:27:25 GMT</pubDate></item><item><title>Logging in python</title><link>https://woile.dev/es/posts/logging-in-python/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For future reference, this is my logging configuration for a new project.&lt;/p&gt;
&lt;p&gt;It is not intended for libraries which already have some kind of set up in place, like django.&lt;/p&gt;
&lt;h3&gt;Simple logging configuration&lt;/h3&gt;
&lt;p&gt;This is a good configuration to start logging right away.
You can use it when you have a single file, or you can share the &lt;code&gt;logger&lt;/code&gt; if stored in a separated file,
which is not recommended when you start growing.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import logging
import os
import sys

LOGLEVEL = os.environ.get('LOGLEVEL', 'INFO').upper()
logger = logging.getLogger("my_app")
logger.setLevel(LOGLEVEL)
console_handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter("[%(asctime)s] %(name)s:%(lineno)d %(levelname)s :: %(message)s")
console_handler.setFormatter(formatter)
console_handler.setLevel(LOGLEVEL)
logger.addHandler(console_handler)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("An info log")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also replace &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;pathname&lt;/code&gt; to get the full path.&lt;/p&gt;
&lt;h3&gt;Project-wide logging configuration&lt;/h3&gt;
&lt;p&gt;In this case we want to configure the logs once, by using the popular dict logging conf:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# ./my_app/logs.py
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(name)s:%(lineno)d %(levelname)s :: %(message)s"
        },
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "formatter": "standard",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",  # Default is stderr
        },
    },
    "loggers": {
        "": {  # root logger
            "handlers": ["default"],
            "level": "WARNING",
            "propagate": False,
        },
        "__main__": {  # if __name__ == '__main__'
            "handlers": ["default"],
            "level": "DEBUG",
            "propagate": False,
        },
        "my_app": {  # folder
            "handlers": ["default"],
            "level": "INFO",
            "propagate": False
        },
    },
}

import logging.config

def init():
    # Run once at startup:
    logging.config.dictConfig(LOGGING_CONFIG)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# ./my_app/foo.py
import logs

logs.init()
logger = logging.getLogger(__name__)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("Hello world")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And your folder structure should look something like:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;my-app/
└── my_app/
    ├── foo.py
    └── logs.py&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Structured logging&lt;/h3&gt;
&lt;p&gt;Structured logs are usually in JSON format, making it easy for machines to parse and index them. See for example &lt;a href="https://www.elastic.co/blog/structured-logging-filebeat"&gt;structured logging with filebeat&lt;/a&gt;.
A common format is bunyan, based on &lt;a href="https://github.com/trentm/node-bunyan"&gt;bunyan-node&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;pip install bunyan&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import logging
import bunyan
import sys

logger = logging.getLogger("my_app")
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stdout)
formatter = bunyan.BunyanFormatter()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

# Send messages
logger.debug("Set LOGLEVEL=DEBUG to see this")
logger.info("Hello world")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this script would only show the &lt;code&gt;info&lt;/code&gt; logger, and it would look like this:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{"name": "my_app", "msg": "Hello world", "time": "2022-06-21T07:41:06Z", "hostname": "&amp;lt;REDACTED&amp;gt;", "level": 30, "pid": 40625, "v": 0}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For local development, pipe the logs to the buyan cli, so they become friendly for developers.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;wget -c https://github.com/LukeMathWalker/bunyan/releases/download/v0.1.7/bunyan-v0.1.7-x86_64-unknown-linux-gnu.tar.gz -O - | tar -xz

python my_app.py | ./bunyan&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Docker issues&lt;/h3&gt;
&lt;p&gt;Sometimes the logs are not sent to the terminal right away, specially if something is blocking. To prevent this, send right away the output to the terminal by setting the env &lt;code&gt;PYTHONUNBUFFERED=1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Dockerfile&lt;/h4&gt;
&lt;p&gt;Include this line&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-dockerfile"&gt;ENV PYTHONUNBUFFERED 1&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Running docker&lt;/h3&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;docker run --env "PYTHONUNBUFFERED=1" python:slim bash&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Docker-compose&lt;/h3&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;version: '3'
services:
  my_app:
    # ...
    environment:
      - PYTHONUNBUFFERED=1&lt;/code&gt;&lt;/pre&gt;</description><guid>https://woile.dev/es/posts/logging-in-python/</guid><pubDate>Wed, 11 May 2022 13:21:55 GMT</pubDate></item><item><title>Digesting Make and Makefiles</title><link>https://woile.dev/es/posts/digesting-make-makefile/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Make and its makefiles, are a fantastic tool to keep track of the commands needed to build or run an application.
I have recently done a big refactor for a project, where we make heavy use of Make, and decided to write this small piece about Make.&lt;/p&gt;
&lt;p&gt;Just create a &lt;code&gt;Makefile&lt;/code&gt; at the root of your project, start adding commands, and done... right? Not really.&lt;/p&gt;
&lt;p&gt;Let's explore a bit more what I mean, and then try to build a mental model that matches reality a bit better,
closing with some magic you can do with Makefiles.&lt;/p&gt;
&lt;p&gt;Set up a practice field by running in the terminal:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;mkdir /tmp/practice
cd /tmp/practice
touch index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And write a minimal &lt;code&gt;Makefile&lt;/code&gt; with your favourite editor (E.g: &lt;code&gt;vim Makefile&lt;/code&gt;)&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;build:
    mkdir dist
    cp index.html dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then execute in your terminal:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;make build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a folder &lt;code&gt;dist&lt;/code&gt;, and copy &lt;code&gt;index.html&lt;/code&gt; into the folder &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is good. Particularly for me, it documents the commands used by the project, and helps future me.&lt;/p&gt;
&lt;p&gt;Let's refactor a bit, to show some extra functionality:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;dist:
    mkdir dist

build: dist
    cp index.html dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;build: dist&lt;/code&gt;, it means: call &lt;code&gt;dist&lt;/code&gt; command &lt;em&gt;before&lt;/em&gt; running &lt;code&gt;build&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;make build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functionality remains the same.&lt;/p&gt;
&lt;h4&gt;Recap&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;We created two commands: &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;dist&lt;/code&gt; is executed by the &lt;code&gt;build&lt;/code&gt; before running itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is ok, but it's not necessary a correct mental model.
In the Makefile world, commands are not commands... but files.&lt;/p&gt;
&lt;h3&gt;New mental model&lt;/h3&gt;
&lt;p&gt;In a nutshell, make builds a &lt;a href="https://en.wikipedia.org/wiki/Dependency_graph"&gt;dependency graph&lt;/a&gt; of files and folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; are actually &lt;strong&gt;target files&lt;/strong&gt; (or folders).&lt;/li&gt;
&lt;li&gt;doing &lt;code&gt;build: dist&lt;/code&gt; means that &lt;code&gt;build&lt;/code&gt; depends on &lt;code&gt;dist&lt;/code&gt; existing first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we had a file called &lt;code&gt;build&lt;/code&gt; , doing &lt;code&gt;make build&lt;/code&gt;, wouldn't execute anything.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;touch build
make build
$ make: `build' is up to date.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to actually treat &lt;code&gt;build&lt;/code&gt; as a command, we have to add &lt;code&gt;.PHONY&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;dist:
    mkdir dist

.PHONY: build
build: dist
    cp index.html dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way Make no longer sees &lt;code&gt;build&lt;/code&gt; as a file, but instead as a recipe, and it will be
executed everytime.&lt;/p&gt;
&lt;h3&gt;Back to targets&lt;/h3&gt;
&lt;p&gt;Remember what we said about targets and dependency graph? No? Me neither.
Don't worry, I actually didn't say anything.&lt;/p&gt;
&lt;p&gt;If you treat your targets as &lt;strong&gt;files&lt;/strong&gt;, Make can keep track of the files that have
changed, and update only those.&lt;/p&gt;
&lt;p&gt;By knowing this our previous example could be refactored into:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;dist:
    mkdir dist

dist/index.html: dist
    cp index.html dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we tell Make to create our target file:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;make dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run multiple times, we get:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;make: `dist/index.html' is up to date.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We would expect that by modifying &lt;code&gt;index.html&lt;/code&gt;, and running &lt;code&gt;make dist/index.html&lt;/code&gt;, it would be rebuilt,
but we are getting the same message.&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;We need to tell Make that it depends on another file: &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;dist:
    mkdir dist

dist/index.html: dist index.html
    cp index.html dist/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, if &lt;code&gt;index.html&lt;/code&gt; is modified, &lt;code&gt;make dist/index.html&lt;/code&gt; will run again.
Thus, when dependecies are updated, &lt;strong&gt;target files&lt;/strong&gt; are recreated.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Makefile targets and dependencies" src="https://woile.dev/images/makefile/make-targets-deps.png"&gt;&lt;/p&gt;
&lt;h3&gt;Patterns&lt;/h3&gt;
&lt;p&gt;Now let's say we have many html files&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;touch about.html privacy.html docs.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we want to do the same for all the files, without creating many commands in Make.
For this case we use a pattern (&lt;code&gt;%&lt;/code&gt;), and some Make variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt;: the target file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt;: the input file&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;dist:
    mkdir dist

dist/%.html: %.html dist
    cp $&amp;lt; $@&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;make dist/about.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we would be explicitly telling Make which file to create.&lt;/p&gt;
&lt;p&gt;But what if we want to copy all the files at the same time?&lt;/p&gt;
&lt;p&gt;Our current implementation, doesn't know about the available files.
And we are providing the &lt;code&gt;about&lt;/code&gt; to the &lt;code&gt;make dist/about.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have to find a way to "know" all the possible targets.&lt;/p&gt;
&lt;h3&gt;Variables&lt;/h3&gt;
&lt;p&gt;We are gonna find the source files (&lt;code&gt;*.html&lt;/code&gt; files which are not in the &lt;code&gt;dist&lt;/code&gt; folder), store in a variable,
and then use that information to create the target html files.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;SRC_HTMLS := $(shell find . -name '*.html' -depth 1)

TARGET_HTMLS := $(SRC_HTMLS:./%.html=dist/%.html)

.PHONY: build
build: $(TARGET_HTMLS)
    $(info Done)

dist:
    mkdir dist

dist/%.html: %.html dist
    cp $&amp;lt; $@&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;make build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; has all the &lt;code&gt;TARGET_HTMLS&lt;/code&gt; files as dependency&lt;/li&gt;
&lt;li&gt;Make also sees &lt;code&gt;dist/%.html&lt;/code&gt; and the pattern will fit the criteria for each &lt;code&gt;TARGET_HTMLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;dist/%.html&lt;/code&gt; we have as dependency  the &lt;code&gt;%.html&lt;/code&gt;, so Make takes the pattern and checks if a &lt;code&gt;%.html&lt;/code&gt; file exist&lt;/li&gt;
&lt;li&gt;If the conditions are met, it runs the &lt;code&gt;cp&lt;/code&gt; command for each file, unless they are already present and not updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can think of&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;build: $(TARGET_HTMLS)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-Makefile"&gt;build: dist/index.html dist/about.html dist/docs.html dist/privacy.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variables can be reference using &lt;code&gt;$()&lt;/code&gt; or &lt;code&gt;${}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also use &lt;code&gt;$(info Done)&lt;/code&gt; to send information messages to the user.
Make also provides &lt;code&gt;$(warning text…)&lt;/code&gt; for warnings, and
&lt;code&gt;$(error text...)&lt;/code&gt; to exit earlier with an error code different than 0.
See &lt;a href="https://www.gnu.org/software/make/manual/html_node/Make-Control-Functions.html"&gt;Make-Control-Functions&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;One more time&lt;/h3&gt;
&lt;p&gt;Let's start over by removing the &lt;code&gt;dist&lt;/code&gt; folder, and see what happens&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-sh"&gt;rm -rf dist&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;❯ make build
mkdir dist
cp index.html dist/index.html
cp about.html dist/about.html
cp docs.html dist/docs.html
cp privacy.html dist/privacy.html
Done

❯ make build
Done
make: Nothing to be done for `build'.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, files that have not changed, won't be rebuilt by Make.&lt;/p&gt;
&lt;p&gt;Now, try using &lt;code&gt;touch&lt;/code&gt; on the different &lt;code&gt;html&lt;/code&gt; files and running &lt;code&gt;make build&lt;/code&gt; to see what happens.&lt;/p&gt;
&lt;h3&gt;More functionality&lt;/h3&gt;
&lt;p&gt;Make is a powerful tool, and provides much more functionality, so far with the web stack
I haven't had the need for more complexity.&lt;/p&gt;
&lt;p&gt;I usually wrap docker commands, and make use of different variables, but if the need arises,
make has extra functionality, life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;li&gt;if/conditions&lt;/li&gt;
&lt;li&gt;change the shell in which the commands are executed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.delete_on_error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Make is usually a good way to keep track of a project's commands, as it's available in Unix systems,
and you can be up and running fast.
But by no means is perfect, it can sometimes be hard to read, or use.
It's not available on Windows. And because it was designed for the C,C++ era, it plays well with files,
but it doesn't mean it fits perfectly the web development paradigm, where you don't "transform" files much
and where &lt;code&gt;docker&lt;/code&gt; is used a lot.&lt;/p&gt;
&lt;p&gt;So depending on your situation, there are some popular alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/casey/just"&gt;just&lt;/a&gt;: modern approach to make written in rust&lt;/li&gt;
&lt;li&gt;&lt;a href="https://earthly.dev/"&gt;earthly.dev&lt;/a&gt;: repeatable builds based on docker&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bazel.build/"&gt;bazel&lt;/a&gt;: build tool from Google&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/github/scripts-to-rule-them-all"&gt;scripts-to-rule-them-all&lt;/a&gt;: just use scripts, like &lt;a href="https://github.com/encode/starlette/tree/master/scripts"&gt;starlette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/make/manual/html_node/"&gt;GNU Make Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makefiletutorial.com/"&gt;Makefiletutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/digesting-make-makefile/</guid><pubDate>Thu, 17 Feb 2022 12:21:47 GMT</pubDate></item><item><title>The Layout Team</title><link>https://woile.dev/es/posts/the-layout-team/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;For the last couple of months I've had this idea spinning in my head, which I'm
calling:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Layout Team&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is a work in progress and I'll try to update it when new things come to my mind.
The topic can be discussed forever, I will try to formalize the idea while keeping
it short.&lt;/p&gt;
&lt;p&gt;I see how the frontend industry is led mostly by hype, and this time I'm not fond of the
direction we are going, specifically with micro-frontends. This pattern,
spite of its benefits, I don't think it can be
implemented properly by most teams, and it's not an idea we should keep suggesting.&lt;/p&gt;
&lt;p&gt;Instead, I'm going to propose an alternative, mostly in the middle.
And as you probably guessed... it's "The Layout Team".&lt;/p&gt;
&lt;p&gt;As far as I'm concerned, the ultimate goal of a frontend is to deliver a good
user experience, and this includes being fast.&lt;/p&gt;
&lt;p&gt;Micro-frontends, make this target hard to achieve.
If you pull parts from all around it will take longer than pulling from a single
place. Of course some teams can accomplish this (out of the question), and they may need it,
but most of the time, is not required, but... what do we do then?&lt;/p&gt;
&lt;p&gt;The main issue to me, is that a frontend application has to be &lt;strong&gt;glued together&lt;/strong&gt; at
some point, or somewhere. Whether you use a micro-frontend architecture or a monorepo, the final
user has to experience one cohesive app, this is &lt;strong&gt;different&lt;/strong&gt; to backends, there's no UI there,
mostly machines talk with APIs. Your frontend talks with the API, but the human interacts with
the frontend.&lt;/p&gt;
&lt;p&gt;Hence the introduction of &lt;strong&gt;"The Layout Team"&lt;/strong&gt; (I'm giving it a formal name)&lt;/p&gt;
&lt;p&gt;This team could have many different flavours.
But ideally, it should be an independent team, holding ownership of the layout of the app.&lt;/p&gt;
&lt;p&gt;Yes, there's nothing fancy here, and the title is self-explanatory.&lt;/p&gt;
&lt;p&gt;The Layout Team maintains the layout, and checks that everyone operates inside the
boundaries created by this team.&lt;/p&gt;
&lt;p&gt;Its responsibilities include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor styles to prevent overlapping components or breaking issues&lt;/li&gt;
&lt;li&gt;Review Pull Requests&lt;/li&gt;
&lt;li&gt;Train other developers, whether through quarterly presentations or one-to-one coaching, but
do it consistently over time. Not fire and forget.&lt;/li&gt;
&lt;li&gt;Maintain &lt;em&gt;some&lt;/em&gt; shared state (logged user or is_authenticated or any other herbs).
But most of the times teams should be able to add and manage their own global state&lt;/li&gt;
&lt;li&gt;Write tools to assist other teams, like linters to prevent CSS or JS, where&lt;/li&gt;
&lt;li&gt;Identify CSS or JS code that may affect the whole app, and potentially code them
into the linters. Example:&lt;ul&gt;
&lt;li&gt;Do not use fixed/absolute because... (unless approved to do so)&lt;/li&gt;
&lt;li&gt;Do not use negative margins because we found that no one knows who to...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write tests for the layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One easy way to do this, is by having a monorepo (recommended). The layout for the different pages
is defined by "The Layout Team", and the rest of the teams write components,
which can be later placed in the places designated by the layout team.&lt;/p&gt;
&lt;p&gt;By doing this, it becomes very easy to produce a small bundle. Because the dependencies
are shared. It's then potentially easier, to identify shared code and cache it in a
separate bundle across the application.&lt;/p&gt;
&lt;p&gt;One of the "benefits" of micro-frontend is supposed to be the freedom for teams to
choose what framework to use, but you end up sending bigger assets to the end user.
This goes against optimizing for the best user experience. So ideally, stick
to a single framework, and deliver it once.&lt;/p&gt;
&lt;p&gt;If you are using React in your monorepo, it means everyone will stick to that
version. If you have multiple repos, even if everyone uses the same framework,
you may end up with different versions, or even the same and still delivering them
as part of each apps bundle!&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;The Layout Team&lt;/strong&gt; leverages the use of &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; heavily.
They shape the app over time. And create &lt;em&gt;slots&lt;/em&gt; for each team.&lt;/p&gt;
&lt;p&gt;Let's see an example:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;div class="box grid grid-cols-2"&amp;gt;
  &amp;lt;div maintainer="teamA"&amp;gt;
    &amp;lt;ComponentFromTeamA/&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div maintainer="teamB"&amp;gt;
      &amp;lt;ComponentFromTeamB/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div maintainer="teamC"&amp;gt;
      &amp;lt;ComponentFromTeamC/&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid {
    display: grid;
  }
  .box {
    margin: 0.75rem;
    width: 90%;
    border-width: 4px;
    border-style: solid;
    --tw-border-opacity: 1;
    border-color: rgba(107, 114, 128, var(--tw-border-opacity));
    padding: 0.75rem;
  }
  .teamBox {
    margin: 0.25rem;
    border-width: 4px;
    border-style: dashed;
    padding: 0.5rem;
  }
  .border-indigo-500 {
    --tw-border-opacity: 1;
    border-color: rgba(99, 102, 241, var(--tw-border-opacity));
  }
  .border-red-500 {
    --tw-border-opacity: 1;
    border-color: rgba(239, 68, 68, var(--tw-border-opacity));
  }
  .border-green-500 {
    --tw-border-opacity: 1;
    border-color: rgba(16, 185, 129, var(--tw-border-opacity));
  }
&lt;/style&gt;

&lt;div class="box grid grid-cols-2"&gt;
  &lt;div class="teamBox border-indigo-500" maintainer="teamA"&gt;TEAM A&lt;/div&gt;
  &lt;div&gt;
    &lt;div class="teamBox border-red-500" maintainer="teamB"&gt;TEAM B&lt;/div&gt;
    &lt;div class="teamBox border-green-500" maintainer="teamC"&gt;TEAM C&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;- Hey! It's almost the same example as a micro-frontend!&lt;/p&gt;
&lt;p&gt;- Well... yes, what did you expect?&lt;/p&gt;
&lt;p&gt;Each team now has a space to place their components, and there's full visibility
over who maintains what.&lt;/p&gt;
&lt;p&gt;It is very important, that the people, that are part of this team,
understand &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; very well.&lt;/p&gt;
&lt;p&gt;Useful layout resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;guide to flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://1linelayouts.glitch.me/"&gt;1linelayouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://csslayout.io/"&gt;csslayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would very much like your feedback.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What has been your experience with micro-frontends?&lt;/li&gt;
&lt;li&gt;Do you think "the layout team" would work?&lt;/li&gt;
&lt;li&gt;What do you think of this proposal?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading&lt;/p&gt;
&lt;h3&gt;Update 2022&lt;/h3&gt;
&lt;p&gt;Seems like there are already some good tools designed for monorepos architecture,
where you can use micro-frontends safely.&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://turborepo.org/"&gt;turborepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nx.dev/"&gt;nx.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid>https://woile.dev/es/posts/the-layout-team/</guid><pubDate>Mon, 08 Nov 2021 07:05:42 GMT</pubDate></item><item><title>Domain driven design at Europython 2021</title><link>https://woile.dev/es/posts/domain-driven-design-at-europython-2021/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Today I participated of the training &lt;a href="https://ep2021.europython.eu/talks/Bvzn5TH-transcend-the-realms-of-development-a-day-in-life-of-a-software-architect/"&gt;transcend the realms of development&lt;/a&gt;
at europython 2021, and I'm quite happy with the result.
Sometimes I'm hesitant of workshops because I don't
manage to extract value, but I really did from this one, and the hosts were great.
I've been questioning myself on how to make better representations of software,
specially among multiple developers and stakeholders, how to share a common language?&lt;/p&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Let's start by my final conclusions:&lt;/p&gt;
&lt;p&gt;My models on how to design software collaboratively are outdated; mostly UML and random diagrams, no clear design process.
There are new techniques used nowadays, so I will asses them and try to integrate
into my tool-belt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Asses &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;. I would like to be trained into this technique.&lt;/li&gt;
&lt;li&gt;Asses &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt; and &lt;a href="https://github.com/plantuml-stdlib/C4-PlantUML"&gt;diagrams as code&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;For KPN, I already added diagrams as code and C4 support in &lt;a href="https://kpn.github.io/mkdocs-kpn-theme/md-extensions/#plantuml-diagrams"&gt;mkdocs-kpn-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Next, you can find my notes, they may not be complete, I tried adding
some images to make them more understandable.&lt;/p&gt;
&lt;h3&gt;Domain driven design&lt;/h3&gt;
&lt;p&gt;Normally architecture grows organically, but it can have unexpected consequences.&lt;/p&gt;
&lt;p&gt;Domain driven design helps with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify domains -&amp;gt; core domains and secondary domains&lt;/li&gt;
&lt;li&gt;Quick feedback -&amp;gt; same language between stakeholders and developers&lt;/li&gt;
&lt;li&gt;Loosely coupled domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Phases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ritual dissent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eventstorming.com/"&gt;Event storming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defining domains&lt;/li&gt;
&lt;li&gt;Building future of our project using &lt;a href="https://c4model.com/"&gt;C4 models&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ritual dissent&lt;/h3&gt;
&lt;p&gt;Small groups iterating over features, then one person from each group
makes a pitch of 1 min to one of the other groups and gathers feedback.&lt;/p&gt;
&lt;p&gt;It goes like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teammate goes to other group and pitches&lt;/li&gt;
&lt;li&gt;Once done, the pitcher just listens to the feedback and takes notes, doesn't need
  to answer anything&lt;/li&gt;
&lt;li&gt;Goes back to the team and keeps refining&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The owner of a problem often has fixed ideas about both the problem and possible solutions. Ritual dissent, developed by Dave Snowden of Cognitive Edge, allows a group of people to discuss a problem whilst its ‘owner’ turns around and listens to the discussion without intervening.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Event storming&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;EventStorming is a flexible workshop format for collaborative exploration of complex business domains.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was quite pleased of the way it went with &lt;a href="https://www.eventstorming.com/"&gt;event storming&lt;/a&gt;,
because it's simple, easy to pick up technique, while being quite expressive.&lt;/p&gt;
&lt;p&gt;At the end of the day, event storming should help find bounded contexts.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://github.com/ddd-crew/eventstorming-glossary-cheat-sheet"&gt;event storming glossary cheat sheet&lt;/a&gt; for more documentation.&lt;/p&gt;
&lt;h3&gt;Defining domains&lt;/h3&gt;
&lt;p&gt;Once you are done with the event storm, you can start identifying your domains, take a look
at the next digram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="event storming context" src="https://woile.dev/images/domain-driven-design-at-europython-2021/event-storming-context.png"&gt;&lt;/p&gt;
&lt;p&gt;Taken from a &lt;a href="https://miro.com/miroverse/event-storming/"&gt;miro board over event storming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are the usual steps to finding the domains:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collect Domain Events - discover them&lt;/li&gt;
&lt;li&gt;Refine Domain Events - placing them in sequence&lt;/li&gt;
&lt;li&gt;Track causes - modelling out the broader ecosystem&lt;/li&gt;
&lt;li&gt;Re-sorting &amp;amp; result - categorize the events and build Bounded Contexts&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Messages between systems&lt;/h3&gt;
&lt;p&gt;We didn't get to this step.&lt;/p&gt;
&lt;h3&gt;Building the future of a project&lt;/h3&gt;
&lt;p&gt;We didn't get to this step, either, but it's about using C4 diagrams.
There was also a recommendation to use diagrams as a code, like plantUML, which
has support for C4 diagrams.&lt;/p&gt;
&lt;p&gt;In theory, C4 are zoom-in diagrams, with a very small surface of components to be learnt, different
to other approaches like UML, which have a massive scope.&lt;/p&gt;
&lt;p&gt;C4 has 4 levels of abstraction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;System Context diagram&lt;/strong&gt;: allows you to step back and see the big picture
   &lt;img src="https://c4model.com/img/bigbankplc-SystemContext.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container diagram&lt;/strong&gt;: shows the high-level shape of the software architecture and how responsibilities are distributed across it. It also shows the major technology choices and how the containers communicate with one another.
   &lt;img src="https://c4model.com/img/bigbankplc-Containers.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component diagram&lt;/strong&gt;: decomposes each container further to identify the major structural building blocks and their interactions.
   shows how a container is made up of a number of "components", what each of those components are, their responsibilities and the technology/implementation details.
   &lt;img src="https://c4model.com/img/bigbankplc-Components.png" width="800"&gt;&lt;/li&gt;
&lt;li&gt;Code: it is usually recommended to generate this automatically from the code, or do
   it only when really necessary.&lt;/li&gt;
&lt;/ol&gt;</description><guid>https://woile.dev/es/posts/domain-driven-design-at-europython-2021/</guid><pubDate>Mon, 26 Jul 2021 17:44:24 GMT</pubDate></item><item><title>FIRE para Argentinos en los Países Bajos</title><link>https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;Hola!&lt;/p&gt;
&lt;p&gt;Mi idea con este post es compartir un poco la información que he recolectado y tirarte
la información necesaria para arrancar sin tener que pensar mucho.&lt;/p&gt;
&lt;p&gt;El tema inversiones es algo que &lt;strong&gt;no me atrae&lt;/strong&gt;, así que estoy tratando de resolverlo
efectivamente, para no tener que pensar en eso en el futuro.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ATENCIÓN&lt;/p&gt;
&lt;p&gt;No me dedico a esto, y tampoco me gusta, así que no te puedo dar ninguna garantía
de nada. Tomalo como una introducción al tema.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cualquier duda, aporte o corrección son bienvenidos, hay una sección de comentarios al
final o podes contactarme en &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Introducción&lt;/h3&gt;
&lt;p&gt;"Financial Independence, Retire Early" es un movimiento cuyo objetivo es acumular
bienes, hasta poder vivir de los ingresos pasivos (&lt;em&gt;passive income&lt;/em&gt;) que estos generan
e ir vendiendo los bines despacio.
La idea es maximizar los ahorros, reducir los gastos y encontrar distintas formas de
aumentar los ingresos.&lt;/p&gt;
&lt;p&gt;Se teoriza que cuanto más ahorres de tu salario, más rápido te vas a poder retirar.&lt;/p&gt;
&lt;p&gt;Esto &lt;strong&gt;no se trata de hacerse rico al instante&lt;/strong&gt;, sino retirarse temprano, es decir,
en menos tiempo de lo que se llega a una pensión.&lt;/p&gt;
&lt;p&gt;Tampoco se trata de tener una tonelada de plata, sino que tus bienes produzcan más o menos
los gastos que generás ahora.&lt;/p&gt;
&lt;p&gt;Por tirar un número, yo diría que se tarda en promedio, 20 años; esto es mucho menos que
la pensión. Esto varía dependiendo de tu situación.&lt;/p&gt;
&lt;p&gt;Mas allá de eso, es un gran complemento a lo que será tu pensión y es &lt;strong&gt;mejor que
tener tu dinero parado&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Podes leer más en el &lt;a href="https://www.reddit.com/r/financialindependence/wiki/faq"&gt;faq de /r/financialindependance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Asegurate de &lt;strong&gt;no tener deudas&lt;/strong&gt; y tener un colchoncito de dinero, por lo menos
para &lt;strong&gt;poder vivir por 6 meses&lt;/strong&gt;, antes de empezar.&lt;/p&gt;
&lt;h3&gt;Inversiones&lt;/h3&gt;
&lt;p&gt;Yo me voy a enfocar en &lt;strong&gt;dónde invertir&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En general, los argentinos en los Países Bajos tienen un salario que les permite
ahorrar. Pero dada nuestra historia, (o por lo menos yo) no sabemos qué se puede
hacer con los ahorros, además de tenerlos en la cuenta.&lt;/p&gt;
&lt;p&gt;Entonces... dónde hay que invertir? En el stock market. Sí, &lt;strong&gt;acciones&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El stock market tiene el margen de retorno más alto (~7.5% cuenta la leyenda),
mejor que real estate, y otros &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;[0]&lt;/a&gt;, y el riesgo lo controlamos
invirtiendo de la forma controlada, y a largo plazo que se explica en este post.
El canadiense Ben Felix explica, por ejemplo, el costo asociado a comprar un hogar en &lt;a href="https://youtu.be/Uwl3-jBNEd4"&gt;este video&lt;/a&gt;. Y en el libro &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to wealth&lt;/a&gt; se
expande mucho sobre el tema de index funds, muy &lt;strong&gt;recomendado&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stock market" src="https://woile.dev/images/fire-para-argentinos-en-los-paises-bajos/stock.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pero no vamos a invertir de la manera que uno piensa en acciones, teniendo que mirar todos los días la pantallita del celular, &lt;strong&gt;eso no por favor!&lt;/strong&gt; Ya veremos más adelante.&lt;/p&gt;
&lt;h4&gt;Cuánto necesito para retirarme&lt;/h4&gt;
&lt;p&gt;El cálculo es &lt;strong&gt;25 veces tus gastos anuales&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Trinity_study"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilizo €40k anuales para vivir. Entonces €40k * 25 = €1M&lt;/li&gt;
&lt;li&gt;Tengo €1M en ahorros. Entonces puedo gastar €40k anuales (4%).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ese &lt;strong&gt;4%&lt;/strong&gt; aparece en muchos lugares mencionado.&lt;/p&gt;
&lt;p&gt;Pueden leer "&lt;a href="https://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;The Shockingly Simple Math Behind Early Retirement&lt;/a&gt;" para más info.&lt;/p&gt;
&lt;h4&gt;Dónde invierto&lt;/h4&gt;
&lt;p&gt;Básicamente invertiremos en ETFs o &lt;em&gt;index funds&lt;/em&gt;, que son más o menos lo mismo, a largo
plazo no importa mucho la diferencia.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;index funds&lt;/em&gt; son un conjunto de acciones de muchas empresas.&lt;/p&gt;
&lt;p&gt;Por los '70s, un tal &lt;a href="https://en.wikipedia.org/wiki/John_C._Bogle"&gt;John C. Bogle&lt;/a&gt; dijo que había que armar un index que
imitara la performance del mercado en general a largo plazo.
Si el mercado en un período largo de tiempo genera 10% de interés, eso es a lo que apuntamos.
Dijo que el &lt;strong&gt;mercado siempre está creciendo&lt;/strong&gt;.
Fundó entonces &lt;a href="https://investor.vanguard.com/corporate-portal/"&gt;The Vanguard Group&lt;/a&gt;, en la que
los dueños son los mismos clientes, es decir, si tenés acciones del index sos en parte dueño.&lt;/p&gt;
&lt;p&gt;Bogle estaba en contra de la especulación, que es cortoplacista y se enfoca en
el precio de las acciones. En cambio, a largo plazo obtenemos una ganancia en base
al negocio en sí mismo, y la gente que lo saca adelante.&lt;/p&gt;
&lt;p&gt;Cómo imitó al mercado? Seleccionando un conjunto de muchas empresas.
Blog entonces lanzó su primer index fund atado al &lt;a href="https://en.wikipedia.org/wiki/S%26P_500_Index"&gt;S&amp;amp;P500&lt;/a&gt;, que son las mejores 500 empresas
americanas.&lt;/p&gt;
&lt;p&gt;El resto es historia.&lt;/p&gt;
&lt;p&gt;Hoy en día hay muchísimos tipos de fondos. A mi me gustan los &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Environmental,_social_and_corporate_governance"&gt;ESG&lt;/a&gt;&lt;/strong&gt; que son &lt;strong&gt;fondos
sustentables&lt;/strong&gt;. Es interesante que el mismo dinero que nos va a dar de comer puede tener
un impacto (positivo o negativo) en el mundo.&lt;/p&gt;
&lt;h4&gt;Cómo invertir&lt;/h4&gt;
&lt;p&gt;Estando en los Países Bajos es muy fácil, puede ser a través de la app del banco,
o usando &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;Trading 212&lt;/a&gt; (T212). DeGiro no la recomiendo, porque me pedía un número
fiscal que no tengo y no pude activar mi cuenta.&lt;/p&gt;
&lt;p&gt;En T212 te van a pedir una &lt;em&gt;proof of address&lt;/em&gt;, que puede ser la boleta del agua.&lt;/p&gt;
&lt;p&gt;En teoría, ellos te abren una cuenta que es tuya, y no la pueden tocar, esto
está protegido por leyes de la Unión Europea. A mi igual me cuesta confiar en esas apps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Si te vas a abrir una cuenta en T212, usa &lt;a href="https://www.trading212.com/invite/GINwpabB"&gt;mi link de referencia&lt;/a&gt; que
nos dan una acción de hasta €100 a cada uno.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dependiendo la plataforma que elijas, vas a tener un abanico de ofertas diferentes,
y sus costos varían. Pero el tema de costos es despreciable, así que no importa mucho.&lt;/p&gt;
&lt;p&gt;A continuación, dejo una lista que la podes usar así como está, dependiendo de tu
plataforma:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plataforma&lt;/th&gt;
&lt;th&gt;Index Fund&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T212&lt;/td&gt;
&lt;td&gt;100% VWRL FTSE All-World Index (IE00B3RBWM25)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ING Zelf op de beurs&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ABN Amro Zelf Beleggen Basis&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rabobank Zelf Beleggen&lt;/td&gt;
&lt;td&gt;88% NT World MSCI World Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011225305) + 12% NT EM MSCI Emerging Markets Custom &lt;strong&gt;ESG&lt;/strong&gt; Index (NL0011515424)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;La plataforma que elijas, la buscás en Google, y te va a llevar a dónde hacer click
para configurar o crear una cuenta.&lt;/p&gt;
&lt;p&gt;Habrás notado que para los bancos es el mismo fund the &lt;a href="https://www.northerntrust.com/netherlands/home"&gt;Northern Trust&lt;/a&gt; (NT), esto
es así, porque están registrados en los Países Bajos, y no se qué mambo hay que
terminamos pagando menos impuestos. (Actualizado &lt;a href="https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/#2021-03-22"&gt;2021-03-22&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Además son &lt;strong&gt;ESG&lt;/strong&gt;, que significa "Environmental, social and corporate governance" y eso es genial.&lt;/p&gt;
&lt;p&gt;T212 no tiene disponibles los fondos de NT, pero los de Vanguard son los más recomendados
en la mayor parte del mundo y son buenos. No sé si tienen &lt;strong&gt;ESG&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El porcentaje que aparece es cuánto hay que invertir en cada uno.
Si vas a poner €100, entonces €88 van para World Custom y €12 para Emerging Market.&lt;/p&gt;
&lt;p&gt;Todos los meses separá una parte de tu salario, y volvés a comprar en el mismo fund.&lt;/p&gt;
&lt;p&gt;Para ver costos, cuánto obtendremos de retorno, y más información, un holandés hizo la web &lt;a href="https://www.indexfondsenvergelijken.nl/"&gt;indexfondsenvergelijken.nl&lt;/a&gt;, que es genial.&lt;/p&gt;
&lt;h3&gt;Impuestos&lt;/h3&gt;
&lt;p&gt;Vas a tener que pagar impuestos por todos tus bienes en Holanda, de eso olvidate
y mejor no luchar en contra.&lt;/p&gt;
&lt;p&gt;Tus &lt;em&gt;assets&lt;/em&gt; los vas a tener que reportar. Estés usando el banco o una plataforma,
todos los años, en diciembre, te van a mandar un reporte con el valor de tus inversiones hasta ese momento.
Ese valor es el que vas a tener que ingresar en la declaración jurada de ese año, en la parte de &lt;em&gt;wealth tax (box 3)&lt;/em&gt;.
Capaz te dan algún beneficio por comprar los NT por ejemplo, pero todavía no sé bien cómo funciona,
por el momento, solo se que hay algún tipo de beneficio&lt;/p&gt;
&lt;p&gt;Los primeros €30k si sos soltero o €60k para parejas, son libres de impuesto. Te
van a cobrar impuestos solamente sobre el monto que supere ese limite.&lt;/p&gt;
&lt;p&gt;Si vos tenes €75k, te van a cobrar impuestos sobre €15k solamente.&lt;/p&gt;
&lt;p&gt;Esta es la tablita del 2019&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Braket&lt;/th&gt;
&lt;th&gt;Impuesto&lt;/th&gt;
&lt;th&gt;Ejemplo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;€0-€71.650&lt;/td&gt;
&lt;td&gt;0.58%&lt;/td&gt;
&lt;td&gt;€50.000 -&amp;gt; €290&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;€71.651-989.736&lt;/td&gt;
&lt;td&gt;1.34%&lt;/td&gt;
&lt;td&gt;€300.000 -&amp;gt; €4.020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt; €989.737&lt;/td&gt;
&lt;td&gt;1.68%&lt;/td&gt;
&lt;td&gt;€1.100.000 -&amp;gt; €18.480&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Obtener el dinero de las inversiones&lt;/h3&gt;
&lt;p&gt;Los fondos de inversión, bonos, stock, y otros, suelen producir &lt;a href="https://en.wikipedia.org/wiki/Dividend"&gt;dividendos&lt;/a&gt;,
que es la distribución de ganancias hacia los shareholders.&lt;/p&gt;
&lt;p&gt;Como vos vas a ser uno, te va a llegar esa plata; en general te la depositan en
la plataforma que uses.&lt;/p&gt;
&lt;p&gt;La idea es que una vez que llegás a tu objetivo, vivas de los dividendos, pero a
veces también vas a tener que vender una partecita.&lt;/p&gt;
&lt;p&gt;Digamos que tenés que sacar 4% de tu portfolio por año. Si los dividendos te dan
2.5%, vas a tener q vender un 1.5%. Pero no importa, porque ese 1.5% lo
recuperarías ese mismo año en teoría.&lt;/p&gt;
&lt;p&gt;En los Países Bajos, los fondos de inversión, están obligados a pagarte los dividendos
al menos una vez por año, durante los primeros 8 meses del año.&lt;/p&gt;
&lt;p&gt;Northern Trust fund, por ejemplo, los suele pagar en febrero.&lt;/p&gt;
&lt;h3&gt;No vivís en Holanda&lt;/h3&gt;
&lt;p&gt;Si estas en USA lee el libro &lt;a href="https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth"&gt;Simple path to Wealth&lt;/a&gt; que te va a guiar.&lt;/p&gt;
&lt;p&gt;Si estas en otro país de Europa podes pedir consejo en &lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pero el principio es el mismo.&lt;/p&gt;
&lt;h3&gt;Resumen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abrite una cuenta de inversiones en tu banco o app favorita.&lt;/li&gt;
&lt;li&gt;Invertí en &lt;em&gt;Index Funds&lt;/em&gt; (Northern Trust o Vanguard).&lt;/li&gt;
&lt;li&gt;Hacelo un hábito y olvidate del tema, no importa si el mercado cae, &lt;strong&gt;NO VENDAS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research pendiente&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;30% ruling no necesita declarar ahorros e inversiones? &lt;a href="https://www.xpat.nl/expat-netherlands/legal-financial-netherlands/dutch-taxes/#main:~:text=Box%203%3A%20Taxable%20Income%20from%20Savings%20and%20Investments"&gt;Pareciera que no&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Invertir en stocks "green" aumenta nuestro máximo a €50k?&lt;/li&gt;
&lt;li&gt;Cómo se hace el rebalance anual?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Actualizaciones&lt;/h3&gt;
&lt;h4&gt;2021-03-22 &lt;a name="2021-03-22"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Un amigo me confirmó que si tenes el 30% ruling no pagas impuestos en el BOX 3 por inversiones o savings, luego de
hablar con el ABN.&lt;/li&gt;
&lt;li&gt;Es posible dejar la cuenta abierta del banco si te vas a vivir a otro país, es decir que las inversiones
las podes seguir manejando por ahí.&lt;/li&gt;
&lt;li&gt;Beneficio de tener index fund registrado en los Países Bajos:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Northern Trust indexfunds are domiciled in the Netherlands and thus avoid dividend leakage which increases their returns about 0,25% per year as compared with a similar indexfund or ETF domiciled in Ireland or Luxembourg (as most in Europe are). Dividend leakage means you'd pay capital gains taxes twice on the same gains. A 0,25% difference isn't the end of the world if you take into account you do pay service fees at ABN AMRO and Rabobank while for a similar ETF at DeGiro you wouldn't pay a service fee.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;2022-01-14&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hasta ahora mi banco reporta un crecimiento del 20% desde mediados del 2020, manteniendo la misma estrategia.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recursos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE/comments/flc6d1/all_world_index_portfolios_en_broker_kosten_2020/"&gt;Análisis de los Index Fund y costos 2020 (holandes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/EuropeFIRE/"&gt;r/EuropeFIRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/DutchFIRE"&gt;r/DutchFIRE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@nick604?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Nick Chong&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hola 👋&lt;/p&gt;
&lt;p&gt;Si te interesa lo que escribo podes seguirme en &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;</description><category>argentinos</category><category>dinero</category><category>fire</category><category>holanda</category><category>inversion</category><guid>https://woile.dev/es/posts/fire-para-argentinos-en-los-paises-bajos/</guid><pubDate>Mon, 03 Aug 2020 16:08:26 GMT</pubDate></item><item><title>Automating semver releases with commitizen</title><link>https://woile.dev/es/posts/automating-semver-releases-with-commitizen/</link><dc:creator>Woile</dc:creator><description>&lt;p&gt;&lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; is a great way to version an application.
Languages like rust have &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-cratesio"&gt;fully embraced it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SemVer version looks like this: &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quite simple, right?&lt;/p&gt;
&lt;p&gt;We can map that to &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; where&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAJOR&lt;/code&gt; ➡️ BREAKING CHANGES ⚠️&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt; ➡️ New stuff 🎉&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; ➡️ Security 🔒 and bug fixes 🐛&lt;/p&gt;
&lt;p&gt;That's the highlight.&lt;/p&gt;
&lt;h3&gt;Making a new release&lt;/h3&gt;
&lt;p&gt;Usually, when making a new semantic version (semver), you have to review your
commits, check if there's any braking changes, then check if there are new features,
otherwise, it's just a patch. This process can be tedious, but semver gives
developers a lot of information about a release, like if they can update safely,
new features, or they &lt;strong&gt;must&lt;/strong&gt; update.&lt;/p&gt;
&lt;p&gt;The release process can be fully automated, but it has a price.&lt;/p&gt;
&lt;h3&gt;The Price&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automating release&lt;/h3&gt;
&lt;p&gt;By writing commits this way, we have to think, in that moment, what kind of change
we are introducing. And that information get's encoded in the message.&lt;/p&gt;
&lt;p&gt;Let's see a simple rule for parseable, easy to map messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Include MAJOR:, MINOR:, PATCH: at the beginning of each commit. If not present
the commit will be skipped, and it won't be released.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commits examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAJOR: Change public interface for class User&lt;/p&gt;
&lt;p&gt;MINOR: Add new type of user (employee)&lt;/p&gt;
&lt;p&gt;PATCH: Fix full name not being displayed properly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's it! The next step is to use a tool to collect the commits, and generate
the correct &lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Commit tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Talk imperative and follow this rule: &lt;code&gt;If applied, this commit will &amp;lt;commit message&amp;gt;&lt;/code&gt; &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keep the subject short&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introducing commitizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/commitizen-tools/commitizen"&gt;Commitizen&lt;/a&gt; is a tool to do exactly that.&lt;/p&gt;
&lt;p&gt;I created it in order to automate that process. Based on existing tools from
the JS ecosystem but which I found hard to use.&lt;/p&gt;
&lt;p&gt;By default it parses the widely popular commit rules: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But you can &lt;a href="https://commitizen-tools.github.io/commitizen/customization/#2-customize-through-customizing-a-class"&gt;easily extend commitizen&lt;/a&gt; to create the example given before.&lt;/p&gt;
&lt;p&gt;Not only it will create the version, but it can also generate the changelog.&lt;/p&gt;
&lt;p&gt;It's really easy to use, first create a &lt;code&gt;.cz.toml&lt;/code&gt; file in your project's root.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-toml"&gt;[tool.commitizen]
version = "2.5.1"
version_files = ["setup.py", "Dockerfile", "src/__version__.py", "scripts/publish"]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's it, by running a single command we get the version and the changelog.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cz bump --changelog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;veresion_files&lt;/code&gt; will also bump the version in the specified files.&lt;/p&gt;
&lt;h3&gt;CI/CD&lt;/h3&gt;
&lt;p&gt;&lt;img alt="diagram of semantic release" src="https://woile.dev/images/automating-deployment-with-commitizen/semantic_release.png"&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, you'd execute commitizen during the "merge job" (green in the diagram), where "bump version" is highlighted.&lt;/p&gt;
&lt;p&gt;For example, if you are using Github Actions, you'd add this to your job:&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;on:
  push:
    branches:
      - main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commitizen then, will generate a new commit, with the updated version in the files and the changelog; and a new tag.&lt;/p&gt;
&lt;p&gt;Both are pushed back.&lt;/p&gt;
&lt;p&gt;For the new commit, we should not trigger again the CI.&lt;/p&gt;
&lt;p&gt;The new tag, instead, should trigger another job, "tag job" (purple in the diagram), which will take care of the release, which can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deploying to kubernetes&lt;/li&gt;
&lt;li&gt;publishing to pypi/npm/cargo&lt;/li&gt;
&lt;li&gt;deploying to a cloud service, like AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;Recap&lt;/h3&gt;
&lt;h4&gt;Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;conventional commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Price&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Write parseable commits&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Command&lt;/h4&gt;
&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cz bump --changelog&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Try commitizen and check the &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We aim for simplicity, trying to make this process as simple as possible, but
the tool is quite flexible, explore it, and see if it fits for your use cases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, hello 👋&lt;/p&gt;
&lt;p&gt;If you are interested in what I write, follow me on &lt;a href="https://twitter.com/santiwilly"&gt;twitter&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>https://woile.dev/es/posts/automating-semver-releases-with-commitizen/</guid><pubDate>Wed, 15 Jul 2020 15:27:20 GMT</pubDate></item></channel></rss>